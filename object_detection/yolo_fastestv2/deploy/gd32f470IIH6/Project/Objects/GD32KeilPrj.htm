<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GD32KeilPrj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GD32KeilPrj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Fri Feb 16 17:52:09 2024
<BR><P>
<H3>Maximum Stack Usage =        784 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; InitSoftware &rArr; InitCamera &rArr; InitGUI &rArr; InitGUIRadio &rArr; CreateRadioWidget &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[14]">BusFault_Handler</a> from gd32f4xx_it.o(i.BusFault_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[82]">ButtonPressCallback</a> from guibutton.o(i.ButtonPressCallback) referenced from guibutton.o(i.InitGUIButton)
 <LI><a href="#[30]">CAN0_EWMC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2e]">CAN0_RX0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2f]">CAN0_RX1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2d]">CAN0_TX_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5c]">CAN1_EWMC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5a]">CAN1_RX0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5b]">CAN1_RX1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[59]">CAN1_TX_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[7f]">ConfigSDAMode</a> from gt1151q.o(i.ConfigSDAMode) referenced from gt1151q.o(i.InitGT1151Q)
 <LI><a href="#[87]">ConfigSDAMode</a> from sccb.o(i.ConfigSDAMode) referenced from sccb.o(i.InitSCCB)
 <LI><a href="#[68]">DCI_IRQHandler</a> from dci.o(i.DCI_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[25]">DMA0_Channel0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[26]">DMA0_Channel1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[27]">DMA0_Channel2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[28]">DMA0_Channel3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[29]">DMA0_Channel4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[2b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[49]">DMA0_Channel7_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[52]">DMA1_Channel0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[53]">DMA1_Channel1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[54]">DMA1_Channel2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[55]">DMA1_Channel3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[56]">DMA1_Channel4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5e]">DMA1_Channel5_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5f]">DMA1_Channel6_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[60]">DMA1_Channel7_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[17]">DebugMon_Handler</a> from gd32f4xx_it.o(i.DebugMon_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[80]">Delay</a> from gt1151q.o(i.Delay) referenced from gt1151q.o(i.InitGT1151Q)
 <LI><a href="#[88]">Delay</a> from sccb.o(i.Delay) referenced from sccb.o(i.InitSCCB)
 <LI><a href="#[57]">ENET_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[58]">ENET_WKUP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4a]">EXMC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[20]">EXTI0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[42]">EXTI10_15_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[21]">EXTI1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[22]">EXTI2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[23]">EXTI3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[24]">EXTI4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[31]">EXTI5_9_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[1e]">FMC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[6a]">FPU_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[7e]">GetSDA</a> from gt1151q.o(i.GetSDA) referenced from gt1151q.o(i.InitGT1151Q)
 <LI><a href="#[86]">GetSDA</a> from sccb.o(i.GetSDA) referenced from sccb.o(i.InitSCCB)
 <LI><a href="#[12]">HardFault_Handler</a> from gd32f4xx_it.o(i.HardFault_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3a]">I2C0_ER_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[39]">I2C0_EV_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3c]">I2C1_ER_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3b]">I2C1_EV_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[63]">I2C2_ER_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[62]">I2C2_EV_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[72]">IPA_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[e]">InitMemory</a> from malloc.o(i.InitMemory) referenced 2 times from malloc.o(.data)
 <LI><a href="#[76]">JpegInfunc</a> from jpeg.o(i.JpegInfunc) referenced from jpeg.o(i.DisplayJPEGInFlash)
 <LI><a href="#[77]">JpegOutfunc</a> from jpeg.o(i.JpegOutfunc) referenced from jpeg.o(i.DisplayJPEGInFlash)
 <LI><a href="#[1b]">LVD_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[13]">MemManage_Handler</a> from gd32f4xx_it.o(i.MemManage_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[f]">MemoryPerused</a> from malloc.o(i.MemoryPerused) referenced 2 times from malloc.o(.data)
 <LI><a href="#[11]">NMI_Handler</a> from gd32f4xx_it.o(i.NMI_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[79]">NextCallback</a> from camera.o(i.NextCallback) referenced from camera.o(i.InitCamera)
 <LI><a href="#[18]">PendSV_Handler</a> from gd32f4xx_it.o(i.PendSV_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[78]">PreviouCallback</a> from camera.o(i.PreviouCallback) referenced from camera.o(i.InitCamera)
 <LI><a href="#[1f]">RCU_CTC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[43]">RTC_Alarm_IRQHandler</a> from rtc.o(i.RTC_Alarm_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[1d]">RTC_WKUP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[7a]">RadioChange</a> from camera.o(i.RadioChange) referenced from camera.o(i.InitCamera)
 <LI><a href="#[83]">RadioPressCallback</a> from guiradio.o(i.RadioPressCallback) referenced from guiradio.o(i.InitGUIRadio)
 <LI><a href="#[10]">Reset_Handler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4b]">SDIO_IRQHandler</a> from sdcard.o(i.SDIO_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3d]">SPI0_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4d]">SPI2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[6d]">SPI3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[6e]">SPI4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[6f]">SPI5_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[16]">SVC_Handler</a> from gd32f4xx_it.o(i.SVC_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[7c]">SetSCL</a> from gt1151q.o(i.SetSCL) referenced from gt1151q.o(i.InitGT1151Q)
 <LI><a href="#[84]">SetSCL</a> from sccb.o(i.SetSCL) referenced from sccb.o(i.InitSCCB)
 <LI><a href="#[7d]">SetSDA</a> from gt1151q.o(i.SetSDA) referenced from gt1151q.o(i.InitGT1151Q)
 <LI><a href="#[85]">SetSDA</a> from sccb.o(i.SetSDA) referenced from sccb.o(i.InitSCCB)
 <LI><a href="#[19]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[74]">SystemInit</a> from system_gd32f4xx.o(i.SystemInit) referenced from startup_gd32f450_470.o(.text)
 <LI><a href="#[1c]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[32]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[35]">TIMER0_Channel_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[34]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[33]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[36]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[37]">TIMER2_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[38]">TIMER3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4c]">TIMER4_IRQHandler</a> from timer.o(i.TIMER4_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[50]">TIMER5_DAC_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[51]">TIMER6_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[45]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[48]">TIMER7_Channel_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[47]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[46]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[71]">TLI_ER_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[70]">TLI_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[69]">TRNG_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[7b]">TakePhotoCallback</a> from camera.o(i.TakePhotoCallback) referenced from camera.o(i.InitCamera)
 <LI><a href="#[4e]">UART3_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[6b]">UART6_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[6c]">UART7_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[3f]">USART0_IRQHandler</a> from uart0.o(i.USART0_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from uart2.o(i.USART2_IRQHandler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[61]">USART5_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[5d]">USBFS_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[44]">USBFS_WKUP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[65]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[64]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[67]">USBHS_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[66]">USBHS_WKUP_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[81]">UpdataString</a> from guitop.o(i.UpdataString) referenced from guitop.o(i.InitGUI)
 <LI><a href="#[15]">UsageFault_Handler</a> from gd32f4xx_it.o(i.UsageFault_Handler) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[1a]">WWDGT_IRQHandler</a> from startup_gd32f450_470.o(.text) referenced from startup_gd32f450_470.o(RESET)
 <LI><a href="#[75]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f450_470.o(.text)
 <LI><a href="#[8a]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[1]">forward_concat</a> from layers_generic_float.o(i.forward_concat) referenced 40 times from network_1.o(.data)
 <LI><a href="#[c]">forward_conv2d_rgb_sssa8_ch</a> from layers_conv2d_rgb_sssa8_ch.o(i.forward_conv2d_rgb_sssa8_ch) referenced 2 times from network_1.o(.data)
 <LI><a href="#[a]">forward_dw_3x3_sssa8_ch</a> from layers_dw_sssa8_ch.o(i.forward_dw_3x3_sssa8_ch) referenced 38 times from network_1.o(.data)
 <LI><a href="#[5]">forward_dw_sssa8_ch</a> from layers_dw_sssa8_ch.o(i.forward_dw_sssa8_ch) referenced 16 times from network_1.o(.data)
 <LI><a href="#[9]">forward_gather</a> from layers_generic_float.o(i.forward_gather) referenced 52 times from network_1.o(.data)
 <LI><a href="#[b]">forward_mp_integer_INT8</a> from layers_pool_stm32_integer.o(i.forward_mp_integer_INT8) referenced 2 times from network_1.o(.data)
 <LI><a href="#[7]">forward_pad</a> from layers_generic_float.o(i.forward_pad) referenced 44 times from network_1.o(.data)
 <LI><a href="#[3]">forward_pw_sssa8_ch</a> from layers_pw_sssa8_ch.o(i.forward_pw_sssa8_ch) referenced 102 times from network_1.o(.data)
 <LI><a href="#[6]">forward_sm</a> from layers_nl_generic_float.o(i.forward_sm) referenced 4 times from network_1.o(.data)
 <LI><a href="#[2]">forward_transpose</a> from layers_generic_float.o(i.forward_transpose) referenced 8 times from network_1.o(.data)
 <LI><a href="#[8]">forward_upsample</a> from layers_generic_float.o(i.forward_upsample) referenced 2 times from network_1.o(.data)
 <LI><a href="#[89]">fputc</a> from uart0.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[8b]">func_dummy</a> from layers_conv2d_rgb_sssa8_ch.o(i.func_dummy) referenced from layers_conv2d_rgb_sssa8_ch.o(i.forward_conv2d_rgb_sssa8_ch)
 <LI><a href="#[8c]">func_dummy</a> from layers_dw_sssa8_ch.o(i.func_dummy) referenced from layers_dw_sssa8_ch.o(i.forward_dw_3x3_sssa8_ch)
 <LI><a href="#[8c]">func_dummy</a> from layers_dw_sssa8_ch.o(i.func_dummy) referenced from layers_dw_sssa8_ch.o(i.forward_dw_sssa8_ch)
 <LI><a href="#[8d]">func_dummy</a> from layers_pw_sssa8_ch.o(i.func_dummy) referenced from layers_pw_sssa8_ch.o(i.forward_pw_sssa8_ch)
 <LI><a href="#[73]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4]">nl_func_array_integer</a> from layers_nl_stm32_integer.o(i.nl_func_array_integer) referenced 8 times from network_1.o(.data)
 <LI><a href="#[0]">node_convert</a> from core_convert.o(i.node_convert) referenced 14 times from network_1.o(.data)
 <LI><a href="#[d]">node_convert_integer</a> from core_convert.o(i.node_convert_integer) referenced 2 times from network_1.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[75]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(.text)
</UL>
<P><STRONG><a name="[2a7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[99]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2a8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2a9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2aa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2ab]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2ac]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TLI_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TLI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450_470.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1e2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose_items
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_gather
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_concat
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_ai_buffer_array_copy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_upsample
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[2ad]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_upsample
</UL>

<P><STRONG><a name="[2b0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1e8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_f2lz</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ffixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_factor_ch
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2b1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>

<P><STRONG><a name="[2b3]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2b4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2b5]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[2b6]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>BMPEncodeWithRGB565</STRONG> (Thumb, 502 bytes, Stack size 80 bytes, bmpencoder.o(i.BMPEncodeWithRGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = BMPEncodeWithRGB565 &rArr; CheckDir &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDReadPoint
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFree
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewName
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDir
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMalloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreeShot
</UL>

<P><STRONG><a name="[b8]"></a>BeepCalcDown</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, beep.o(i.BeepCalcDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BeepCalcDown
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>BeepWithTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, beep.o(i.BeepWithTime))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakePhotoCallback
</UL>

<P><STRONG><a name="[14]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>ClearRadioWidgetFocus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radiowidget.o(i.ClearRadioWidgetFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ClearRadioWidgetFocus &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackground
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioPressCallback
</UL>

<P><STRONG><a name="[1a0]"></a>Clr1msFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.Clr1msFlag))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc1msTask
</UL>

<P><STRONG><a name="[1a3]"></a>Clr2msFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.Clr2msFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc2msTask
</UL>

<P><STRONG><a name="[cb]"></a>ConfigDCI</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, dci.o(i.ConfigDCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ConfigDCI &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_mode_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flow_controller_config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_subperipheral_select
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_interrupt_flag_clear
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_interrupt_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_deinit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_capture_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_once
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDCI
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCI_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>CreateButtonWidget</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, buttonwidget.o(i.CreateButtonWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = CreateButtonWidget &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawText
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackground
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISaveBackground
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUIButton
</UL>

<P><STRONG><a name="[ff]"></a>CreateLUT</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, ftl.o(i.CreateLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CreateLUT &rArr; NandReadSpare &rArr; NANDWaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadSpare
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFTL
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLFormat
</UL>

<P><STRONG><a name="[101]"></a>CreateRadioWidget</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, radiowidget.o(i.CreateRadioWidget))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = CreateRadioWidget &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISaveBackground
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackground
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUIRadio
</UL>

<P><STRONG><a name="[68]"></a>DCI_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dci.o(i.DCI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DCI_IRQHandler &rArr; ConfigDCI &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_interrupt_flag_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>DeQueue</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, queue.o(i.DeQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DeQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSendBuf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSendBuf
</UL>

<P><STRONG><a name="[17]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>DelayNms</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.DelayNms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGT1151Q
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QAddr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceMountSDCard
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceMountNandFlash
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
</UL>

<P><STRONG><a name="[e4]"></a>DelayNus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, systick.o(i.DelayNus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayNus
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithoutWrite
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWriteSpare
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWritePage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadPage
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
</UL>

<P><STRONG><a name="[103]"></a>DisplayBMP</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bmp.o(i.DisplayBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInMem
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawImage
</UL>

<P><STRONG><a name="[105]"></a>DisplayJPEGInFlash</STRONG> (Thumb, 68 bytes, Stack size 144 bytes, jpeg.o(i.DisplayJPEGInFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = DisplayJPEGInFlash &rArr; jd_decomp &rArr; mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawImage
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBackground
</UL>

<P><STRONG><a name="[1c2]"></a>EnQueue</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(i.EnQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReceiveBuf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReceiveBuf
</UL>

<P><STRONG><a name="[10d]"></a>FTLBadBlockMark</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ftl.o(i.FTLBadBlockMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FTLBadBlockMark &rArr; NandWriteSpare &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWriteSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLFormat
</UL>

<P><STRONG><a name="[10f]"></a>FTLCheckBlockFlag</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ftl.o(i.FTLCheckBlockFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FTLCheckBlockFlag &rArr; NandReadSpare &rArr; NANDWaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLFormat
</UL>

<P><STRONG><a name="[110]"></a>FTLFineUnuseBlock</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, ftl.o(i.FTLFineUnuseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FTLFineUnuseBlock &rArr; NandReadSpare &rArr; NANDWaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
</UL>

<P><STRONG><a name="[111]"></a>FTLFormat</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ftl.o(i.FTLFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FTLFormat &rArr; FTLBadBlockMark &rArr; NandWriteSpare &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWriteSpare
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandEraseBlock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLCheckBlockFlag
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLBadBlockMark
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateLUT
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFTL
</UL>

<P><STRONG><a name="[114]"></a>FTLLogicNumToPhysicalNum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ftl.o(i.FTLLogicNumToPhysicalNum))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLReadSectors
</UL>

<P><STRONG><a name="[113]"></a>FTLReadSectors</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ftl.o(i.FTLReadSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FTLReadSectors &rArr; NandReadPage &rArr; NandECCCorrection &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadPage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLLogicNumToPhysicalNum
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[116]"></a>FTLSetBlockUseFlag</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ftl.o(i.FTLSetBlockUseFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FTLSetBlockUseFlag &rArr; NandWriteSpare &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWriteSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
</UL>

<P><STRONG><a name="[117]"></a>FTLWriteSectors</STRONG> (Thumb, 404 bytes, Stack size 72 bytes, ftl.o(i.FTLWriteSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWritePage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandEraseBlock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyBlockWithoutWrite
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyBlockWithWrite
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCheckPage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLSetBlockUseFlag
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLLogicNumToPhysicalNum
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLFineUnuseBlock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLBadBlockMark
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[c2]"></a>GD25Q16Read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gd25qxx.o(i.GD25Q16Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCNFont24x24
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFontLib
</UL>

<P><STRONG><a name="[121]"></a>GD25Q16Write</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, gd25qxx.o(i.GD25Q16Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GD25Q16Write &rArr; GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16X4KErase
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Read
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16PageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataFontLib
</UL>

<P><STRONG><a name="[122]"></a>GD25Q16X4KErase</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gd25qxx.o(i.GD25Q16X4KErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GD25Q16X4KErase &rArr; GD25Q16WriteEnable &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadWriteByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WriteEnable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Write
</UL>

<P><STRONG><a name="[108]"></a>GUIDrawBackground</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, guiplatform.o(i.GUIDrawBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUIDrawBackground &rArr; LCDColorFill &rArr; LCDDrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDColorFill
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackground
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackground
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataString
</UL>

<P><STRONG><a name="[124]"></a>GUIDrawChar</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, guiplatform.o(i.GUIDrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUIDrawChar &rArr; LCDShowChar &rArr; GetCNFont24x24 &rArr; GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawTextLine
</UL>

<P><STRONG><a name="[10a]"></a>GUIDrawImage</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, guiplatform.o(i.GUIDrawImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJPEGInFlash
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBMP
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackground
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackground
</UL>

<P><STRONG><a name="[10c]"></a>GUIDrawTextLine</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, guiplatform.o(i.GUIDrawTextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GUIDrawTextLine &rArr; GUIDrawChar &rArr; LCDShowChar &rArr; GetCNFont24x24 &rArr; GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontWidth
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawText
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataString
</UL>

<P><STRONG><a name="[109]"></a>GUIFillColor</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, guiplatform.o(i.GUIFillColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GUIFillColor &rArr; LCDFillPixel &rArr; LCDFill &rArr; LCDDrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFillPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUI
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackground
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBackground
</UL>

<P><STRONG><a name="[127]"></a>GUIReadPoint</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, guiplatform.o(i.GUIReadPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GUIReadPoint &rArr; LCDReadPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDReadPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISaveBackground
</UL>

<P><STRONG><a name="[fc]"></a>GUISaveBackground</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, guiplatform.o(i.GUISaveBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GUISaveBackground &rArr; GUIReadPoint &rArr; LCDReadPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIReadPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUI
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateButtonWidget
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRadioWidget
</UL>

<P><STRONG><a name="[19e]"></a>Get1msFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.Get1msFlag))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc1msTask
</UL>

<P><STRONG><a name="[1a2]"></a>Get2msFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.Get2msFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc2msTask
</UL>

<P><STRONG><a name="[128]"></a>GetCNFont24x24</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, fontlib.o(i.GetCNFont24x24))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetCNFont24x24 &rArr; GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Read
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDShowChar
</UL>

<P><STRONG><a name="[10b]"></a>GetFontWidth</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, guiplatform.o(i.GetFontWidth))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawTextLine
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawText
</UL>

<P><STRONG><a name="[12]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>IICCommonEnd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, iiccommon.o(i.IICCommonEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICCommonEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonWriteBytesEx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonWriteBytes
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytesEx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytes
</UL>

<P><STRONG><a name="[133]"></a>IICCommonReadACK</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, iiccommon.o(i.IICCommonReadACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IICCommonReadACK
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonSendOneByte
</UL>

<P><STRONG><a name="[12b]"></a>IICCommonReadBytes</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, iiccommon.o(i.IICCommonReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IICCommonReadBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonSendOneByte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadOneByte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadReg
</UL>

<P><STRONG><a name="[130]"></a>IICCommonReadBytesEx</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, iiccommon.o(i.IICCommonReadBytesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IICCommonReadBytesEx &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonSendOneByte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadOneByte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanGT1151Q
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGT1151Q
</UL>

<P><STRONG><a name="[12f]"></a>IICCommonReadOneByte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, iiccommon.o(i.IICCommonReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IICCommonReadOneByte &rArr; IICCommonSendNAck
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonSendNAck
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytesEx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytes
</UL>

<P><STRONG><a name="[131]"></a>IICCommonSendAck</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, iiccommon.o(i.IICCommonSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICCommonSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadOneByte
</UL>

<P><STRONG><a name="[132]"></a>IICCommonSendNAck</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, iiccommon.o(i.IICCommonSendNAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICCommonSendNAck
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadOneByte
</UL>

<P><STRONG><a name="[12d]"></a>IICCommonSendOneByte</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, iiccommon.o(i.IICCommonSendOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadACK
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonWriteBytesEx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonWriteBytes
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytesEx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytes
</UL>

<P><STRONG><a name="[12c]"></a>IICCommonStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, iiccommon.o(i.IICCommonStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICCommonStart
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonWriteBytesEx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonWriteBytes
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytesEx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytes
</UL>

<P><STRONG><a name="[134]"></a>IICCommonWriteBytes</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, iiccommon.o(i.IICCommonWriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonSendOneByte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>

<P><STRONG><a name="[135]"></a>IICCommonWriteBytesEx</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, iiccommon.o(i.IICCommonWriteBytesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IICCommonWriteBytesEx &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonStart
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonSendOneByte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanGT1151Q
</UL>

<P><STRONG><a name="[136]"></a>InitBeep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, beep.o(i.InitBeep))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitBeep &rArr; ConfigBeepGPIO &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigBeepGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftware
</UL>

<P><STRONG><a name="[14e]"></a>InitButtonWidgetStruct</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, buttonwidget.o(i.InitButtonWidgetStruct))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUIButton
</UL>

<P><STRONG><a name="[137]"></a>InitCamera</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, camera.o(i.InitCamera))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = InitCamera &rArr; InitGUI &rArr; InitGUIRadio &rArr; CreateRadioWidget &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDShowString
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMalloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUI
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640SpecialEffects
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640RGB565Mode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640OutSizeSet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640LightMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640Contrast
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640ColorSaturation
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640Brightness
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640AutoExposure
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDCI
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftware
</UL>

<P><STRONG><a name="[141]"></a>InitDCI</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, dci.o(i.InitDCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InitDCI &rArr; ConfigDCI &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCIGPIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCKOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
</UL>

<P><STRONG><a name="[144]"></a>InitFTL</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ftl.o(i.InitFTL))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InitFTL &rArr; FTLFormat &rArr; FTLBadBlockMark &rArr; NandWriteSpare &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLFormat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateLUT
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[146]"></a>InitFontLib</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fontlib.o(i.InitFontLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = InitFontLib &rArr; CheckFontLib &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGD25QXX
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataFontLib
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFontLib
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftware
</UL>

<P><STRONG><a name="[147]"></a>InitGD25QXX</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gd25qxx.o(i.InitGD25QXX))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = InitGD25QXX &rArr; InitSPI4 &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFontLib
</UL>

<P><STRONG><a name="[14a]"></a>InitGT1151Q</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gt1151q.o(i.InitGT1151Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitGT1151Q &rArr; IICCommonReadBytesEx &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytesEx
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QGPIO
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QAddr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTouch
</UL>

<P><STRONG><a name="[143]"></a>InitGUI</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, guitop.o(i.InitGUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = InitGUI &rArr; InitGUIRadio &rArr; CreateRadioWidget &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayDir
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMalloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISaveBackground
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIFillColor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBackground
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUIRadio
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUIButton
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
</UL>

<P><STRONG><a name="[14d]"></a>InitGUIButton</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, guibutton.o(i.InitGUIButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = InitGUIButton &rArr; CreateButtonWidget &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtonWidgetStruct
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateButtonWidget
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUI
</UL>

<P><STRONG><a name="[14c]"></a>InitGUIRadio</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, guiradio.o(i.InitGUIRadio))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = InitGUIRadio &rArr; CreateRadioWidget &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMalloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRadioWidgetStruct
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRadioWidget
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUI
</UL>

<P><STRONG><a name="[157]"></a>InitLCD</STRONG> (Thumb, 1492 bytes, Stack size 64 bytes, tlilcd.o(i.InitLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InitLCD &rArr; LCDLayerWindowSet
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_struct_para_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_reload_config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_dither_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_deinit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_tli_clock_div_config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_pllsai_config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDTransparencySet
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerWindowSet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerSwitch
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerEnable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerDisable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayDir
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftware
</UL>

<P><STRONG><a name="[168]"></a>InitLED</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led.o(i.InitLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitLED &rArr; ConfigLEDGPIO &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigLEDGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftware
</UL>

<P><STRONG><a name="[e]"></a>InitMemory</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, malloc.o(i.InitMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitMemory &rArr; SetMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[152]"></a>InitNVIC</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nvic.o(i.InitNVIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitNVIC &rArr; ConfigNVIC
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigNVIC
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[145]"></a>InitNandFlash</STRONG> (Thumb, 630 bytes, Stack size 64 bytes, nandflash.o(i.InitNandFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InitNandFlash &rArr; NandReset &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_enable
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadID
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFTL
</UL>

<P><STRONG><a name="[138]"></a>InitOV2640</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, ov2640.o(i.InitOV2640))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = InitOV2640 &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640PWDNSet
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPIO
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadReg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSCCB
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
</UL>

<P><STRONG><a name="[17e]"></a>InitQueue</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, queue.o(i.InitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUARTBuf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUARTBuf
</UL>

<P><STRONG><a name="[151]"></a>InitRCU</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rcu.o(i.InitRCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitRCU &rArr; ConfigRCU
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRCU
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[14f]"></a>InitRadioWidgetStruct</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, radiowidget.o(i.InitRadioWidgetStruct))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUIRadio
</UL>

<P><STRONG><a name="[16f]"></a>InitSCCB</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sccb.o(i.InitSCCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitSCCB &rArr; ConfigIICGPIO &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigIICGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
</UL>

<P><STRONG><a name="[172]"></a>InitSDRAM</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sdram.o(i.InitSDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = InitSDRAM &rArr; ConfigSDRAM &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[149]"></a>InitSPI4</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, spi.o(i.InitSPI4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InitSPI4 &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_struct_para_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_disable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_crc_polynomial_set
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGD25QXX
</UL>

<P><STRONG><a name="[156]"></a>InitSysTick</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, systick.o(i.InitSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitSysTick &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[155]"></a>InitTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = InitTimer &rArr; ConfigTimer4 &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer1
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[179]"></a>InitTouch</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, touch.o(i.InitTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InitTouch &rArr; InitGT1151Q &rArr; IICCommonReadBytesEx &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGT1151Q
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftware
</UL>

<P><STRONG><a name="[153]"></a>InitUART0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart0.o(i.InitUART0))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = InitUART0 &rArr; ConfigUART &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUARTBuf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[154]"></a>InitUART2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart2.o(i.InitUART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = InitUART2 &rArr; ConfigUART2 &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUARTBuf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[167]"></a>LCDClear</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, tlilcd.o(i.LCDClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCDClear &rArr; ipa_destination_init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_transfer_enable
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_pixel_format_convert_mode_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_interrupt_flag_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_interrupt_flag_clear
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_destination_struct_para_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_destination_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_deinit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB565ToRGB888A
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[123]"></a>LCDColorFill</STRONG> (Thumb, 72 bytes, Stack size 36 bytes, tlilcd.o(i.LCDColorFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCDColorFill &rArr; LCDDrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawBackground
</UL>

<P><STRONG><a name="[17f]"></a>LCDColorFillPixel</STRONG> (Thumb, 82 bytes, Stack size 36 bytes, tlilcd.o(i.LCDColorFillPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCDColorFillPixel &rArr; LCDDrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegOutfunc
</UL>

<P><STRONG><a name="[14b]"></a>LCDDisplayDir</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tlilcd.o(i.LCDDisplayDir))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUI
</UL>

<P><STRONG><a name="[af]"></a>LCDDrawPoint</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, tlilcd.o(i.LCDDrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCDDrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDShowChar
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDColorFillPixel
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDColorFill
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_once
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInMem
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
</UL>

<P><STRONG><a name="[188]"></a>LCDFill</STRONG> (Thumb, 362 bytes, Stack size 136 bytes, tlilcd.o(i.LCDFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LCDFill &rArr; LCDDrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_transfer_enable
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_pixel_format_convert_mode_set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_interrupt_flag_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_interrupt_flag_clear
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_destination_struct_para_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_destination_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_deinit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB565ToRGB888A
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDReadPoint
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFillPixel
</UL>

<P><STRONG><a name="[126]"></a>LCDFillPixel</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, tlilcd.o(i.LCDFillPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = LCDFillPixel &rArr; LCDFill &rArr; LCDDrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_once
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIFillColor
</UL>

<P><STRONG><a name="[161]"></a>LCDLayerDisable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tlilcd.o(i.LCDLayerDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCDLayerDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_reload_config
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_layer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[160]"></a>LCDLayerEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tlilcd.o(i.LCDLayerEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCDLayerEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_reload_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_layer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[166]"></a>LCDLayerSwitch</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tlilcd.o(i.LCDLayerSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[15f]"></a>LCDLayerWindowSet</STRONG> (Thumb, 448 bytes, Stack size 80 bytes, tlilcd.o(i.LCDLayerWindowSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCDLayerWindowSet
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_reload_config
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_lut_disable
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_layer_struct_para_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_layer_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_color_key_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[ad]"></a>LCDReadPoint</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, tlilcd.o(i.LCDReadPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCDReadPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInMem
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIReadPoint
</UL>

<P><STRONG><a name="[125]"></a>LCDShowChar</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, tlilcd.o(i.LCDShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCDShowChar &rArr; GetCNFont24x24 &rArr; GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCNFont24x24
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDShowString
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawChar
</UL>

<P><STRONG><a name="[142]"></a>LCDShowString</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, tlilcd.o(i.LCDShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LCDShowString &rArr; LCDShowChar &rArr; GetCNFont24x24 &rArr; GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_once
</UL>

<P><STRONG><a name="[162]"></a>LCDTransparencySet</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tlilcd.o(i.LCDTransparencySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCDTransparencySet
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_reload_config
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[18f]"></a>LEDFlicker</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, led.o(i.LEDFlicker))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDFlicker
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc2msTask
</UL>

<P><STRONG><a name="[13]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MemoryPerused</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, malloc.o(i.MemoryPerused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryPerused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>MyFree</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, malloc.o(i.MyFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MyFree &rArr; FreeMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewName
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataFontLib
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFontLib
</UL>

<P><STRONG><a name="[a8]"></a>MyMalloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, malloc.o(i.MyMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MyMalloc &rArr; MallocMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewName
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUI
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUIRadio
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataFontLib
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFontLib
</UL>

<P><STRONG><a name="[11]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>NandCheckPage</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, nandflash.o(i.NandCheckPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NandCheckPage &rArr; NANDWaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDWaitRB
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
</UL>

<P><STRONG><a name="[11b]"></a>NandCopyBlockWithWrite</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, nandflash.o(i.NandCopyBlockWithWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithWrite
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyBlockWithoutWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
</UL>

<P><STRONG><a name="[11a]"></a>NandCopyBlockWithoutWrite</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nandflash.o(i.NandCopyBlockWithoutWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithoutWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyBlockWithWrite
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
</UL>

<P><STRONG><a name="[194]"></a>NandCopyPageWithWrite</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, nandflash.o(i.NandCopyPageWithWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NandCopyPageWithWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_ecc_config
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_ecc_get
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWaitReady
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDWaitRB
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyBlockWithWrite
</UL>

<P><STRONG><a name="[195]"></a>NandCopyPageWithoutWrite</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, nandflash.o(i.NandCopyPageWithoutWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWaitReady
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDWaitRB
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyBlockWithoutWrite
</UL>

<P><STRONG><a name="[199]"></a>NandECCCorrection</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, nandflash.o(i.NandECCCorrection))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NandECCCorrection &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandECCGetOE
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadPage
</UL>

<P><STRONG><a name="[19a]"></a>NandECCGetOE</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, nandflash.o(i.NandECCGetOE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NandECCGetOE
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandECCCorrection
</UL>

<P><STRONG><a name="[112]"></a>NandEraseBlock</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nandflash.o(i.NandEraseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NandEraseBlock &rArr; NandReadSpare &rArr; NANDWaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWaitReady
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadSpare
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLFormat
</UL>

<P><STRONG><a name="[16d]"></a>NandReadID</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nandflash.o(i.NandReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NandReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
</UL>

<P><STRONG><a name="[115]"></a>NandReadPage</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, nandflash.o(i.NandReadPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NandReadPage &rArr; NandECCCorrection &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_ecc_config
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_ecc_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandECCCorrection
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDWaitRB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLReadSectors
</UL>

<P><STRONG><a name="[100]"></a>NandReadSpare</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, nandflash.o(i.NandReadSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NandReadSpare &rArr; NANDWaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDWaitRB
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandEraseBlock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLFineUnuseBlock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLCheckBlockFlag
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateLUT
</UL>

<P><STRONG><a name="[19b]"></a>NandReadStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nandflash.o(i.NandReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWaitReady
</UL>

<P><STRONG><a name="[16c]"></a>NandReset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nandflash.o(i.NandReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NandReset &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
</UL>

<P><STRONG><a name="[198]"></a>NandWaitReady</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nandflash.o(i.NandWaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithoutWrite
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWriteSpare
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWritePage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandEraseBlock
</UL>

<P><STRONG><a name="[119]"></a>NandWritePage</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, nandflash.o(i.NandWritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NandWritePage &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_ecc_config
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_ecc_get
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWaitReady
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
</UL>

<P><STRONG><a name="[10e]"></a>NandWriteSpare</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nandflash.o(i.NandWriteSpare))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NandWriteSpare &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWaitReady
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLSetBlockUseFlag
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLFormat
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLBadBlockMark
</UL>

<P><STRONG><a name="[13b]"></a>OV2640AutoExposure</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ov2640.o(i.OV2640AutoExposure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OV2640AutoExposure &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
</UL>

<P><STRONG><a name="[13e]"></a>OV2640Brightness</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ov2640.o(i.OV2640Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OV2640Brightness &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreviouCallback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextCallback
</UL>

<P><STRONG><a name="[13d]"></a>OV2640ColorSaturation</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ov2640.o(i.OV2640ColorSaturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OV2640ColorSaturation &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreviouCallback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextCallback
</UL>

<P><STRONG><a name="[13f]"></a>OV2640Contrast</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ov2640.o(i.OV2640Contrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OV2640Contrast &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreviouCallback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextCallback
</UL>

<P><STRONG><a name="[13c]"></a>OV2640LightMode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ov2640.o(i.OV2640LightMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OV2640LightMode &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreviouCallback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextCallback
</UL>

<P><STRONG><a name="[13a]"></a>OV2640OutSizeSet</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ov2640.o(i.OV2640OutSizeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OV2640OutSizeSet &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
</UL>

<P><STRONG><a name="[16e]"></a>OV2640PWDNSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ov2640.o(i.OV2640PWDNSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OV2640PWDNSet
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
</UL>

<P><STRONG><a name="[139]"></a>OV2640RGB565Mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ov2640.o(i.OV2640RGB565Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OV2640RGB565Mode &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
</UL>

<P><STRONG><a name="[140]"></a>OV2640SpecialEffects</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ov2640.o(i.OV2640SpecialEffects))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OV2640SpecialEffects &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreviouCallback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextCallback
</UL>

<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>QueueEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(i.QueueEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>RGB565ToRGB888A</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tlilcd.o(i.RGB565ToRGB888A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RGB565ToRGB888A
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
</UL>

<P><STRONG><a name="[1a4]"></a>RTCGetDate</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, rtc.o(i.RTCGetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTCGetDate &rArr; rtc_current_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToDec
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[1a7]"></a>RTCGetTime</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, rtc.o(i.RTCGetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTCGetTime &rArr; rtc_current_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToDec
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[43]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rtc.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[171]"></a>SCCBReadReg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sccb.o(i.SCCBReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SCCBReadReg &rArr; IICCommonReadBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
</UL>

<P><STRONG><a name="[170]"></a>SCCBWriteReg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sccb.o(i.SCCBWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640SpecialEffects
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640RGB565Mode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640OutSizeSet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640LightMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640Contrast
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640ColorSaturation
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640Brightness
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640AutoExposure
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
</UL>

<P><STRONG><a name="[4b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sdcard.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDIO_IRQHandler &rArr; sd_interrupts_process &rArr; sd_transfer_stop &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_interrupts_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>SPI4ReadWriteByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi.o(i.SPI4ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16X4KErase
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WriteEnable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WaitForWriteEnd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16PageProgram
</UL>

<P><STRONG><a name="[16]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>ScanGT1151Q</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, gt1151q.o(i.ScanGT1151Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ScanGT1151Q &rArr; IICCommonWriteBytesEx &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonWriteBytesEx
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICCommonReadBytesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTouch
</UL>

<P><STRONG><a name="[19f]"></a>ScanTouch</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, touch.o(i.ScanTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ScanTouch &rArr; ScanGT1151Q &rArr; IICCommonWriteBytesEx &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanGT1151Q
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc1msTask
</UL>

<P><STRONG><a name="[1b4]"></a>ScreeShot</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bmpencoder.o(i.ScreeShot))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ScreeShot &rArr; BMPEncodeWithRGB565 &rArr; CheckDir &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakePhotoCallback
</UL>

<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDelayDec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SystemInit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemInit &rArr; InitSDRAM &rArr; ConfigSDRAM &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1_IRQHandler &rArr; BeepCalcDown
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepCalcDown
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIMER4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART0_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, uart0.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART0_IRQHandler &rArr; WriteReceiveBuf &rArr; EnQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReceiveBuf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSendBuf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, uart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; WriteReceiveBuf &rArr; EnQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReceiveBuf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSendBuf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[148]"></a>UpdataFontLib</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, fontlib.o(i.UpdataFontLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = UpdataFontLib &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFree
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMalloc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFontLib
</UL>

<P><STRONG><a name="[15]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450_470.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b9]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[9d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFontLib
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_once
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI1_Run
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewName
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGT1151Q
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceMountSDCard
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceMountNandFlash
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInMem
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJPEGInFlash
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataFontLib
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFontLib
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandECCCorrection
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadPage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFTL
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLFormat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateLUT
</UL>

<P><STRONG><a name="[1c5]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2ba]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[129]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_once
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewName
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioChange
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreviouCallback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextCallback
</UL>

<P><STRONG><a name="[1cb]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1c6]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_nl_softmax_if32of32_kernel
</UL>

<P><STRONG><a name="[2bb]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[1cc]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[2bc]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[1d1]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_upsample
</UL>

<P><STRONG><a name="[1d0]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[1c9]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1cf]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[1ce]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[1ca]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1c8]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[2bd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2be]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2bf]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c7]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[bc]"></a>_ai_platform_acquire_crc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ai_platform_interface.o(i._ai_platform_acquire_crc))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[bd]"></a>_ai_platform_release_crc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ai_platform_interface.o(i._ai_platform_release_crc))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[247]"></a>ai_array_get_byte_size</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ai_datatypes_format.o(i.ai_array_get_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pw_sssa8_ch
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_concat
</UL>

<P><STRONG><a name="[1dd]"></a>ai_array_get_data_byte_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ai_datatypes_format.o(i.ai_array_get_data_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[1d4]"></a>ai_array_to_buffer_fmt</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, ai_datatypes_format.o(i.ai_array_to_buffer_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_array_to_buffer_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>

<P><STRONG><a name="[1e6]"></a>ai_buffer_array_item_set_address</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ai_platform.o(i.ai_buffer_array_item_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_buffer_array_item_set_address
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_create_and_init
</UL>

<P><STRONG><a name="[1da]"></a>ai_buffer_array_sane</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ai_platform.o(i.ai_buffer_array_sane))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
</UL>

<P><STRONG><a name="[1dc]"></a>ai_buffer_get_size</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ai_platform.o(i.ai_buffer_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_buffer_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[1e7]"></a>ai_check_custom_types</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, layers.o(i.ai_check_custom_types))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[1e9]"></a>ai_layers_forward_all</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, layers.o(i.ai_layers_forward_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_layers_forward_all &rArr; _ai_forward_layer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[201]"></a>ai_layers_init_all</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, layers.o(i.ai_layers_init_all))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[202]"></a>ai_layers_post_init_all</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, layers.o(i.ai_layers_post_init_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_layers_post_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
</UL>

<P><STRONG><a name="[1eb]"></a>ai_network_1_create</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, network_1.o(i.ai_network_1_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ai_network_1_create &rArr; ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_create_and_init
</UL>

<P><STRONG><a name="[a0]"></a>ai_network_1_create_and_init</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, network_1.o(i.ai_network_1_create_and_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ai_network_1_create_and_init &rArr; ai_network_1_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_get_error
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_data_params_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init
</UL>

<P><STRONG><a name="[1ed]"></a>ai_network_1_data_params_get</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, network_1_data.o(i.ai_network_1_data_params_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_network_1_data_params_get &rArr; ai_platform_bind_network_params
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_bind_network_params
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_create_and_init
</UL>

<P><STRONG><a name="[9c]"></a>ai_network_1_get_error</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, network_1.o(i.ai_network_1_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_network_1_get_error &rArr; ai_platform_network_get_error &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_create_and_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI1_Run
</UL>

<P><STRONG><a name="[1ee]"></a>ai_network_1_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, network_1.o(i.ai_network_1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ai_network_1_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_1_configure_weights
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_1_configure_activations
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_create_and_init
</UL>

<P><STRONG><a name="[a1]"></a>ai_network_1_inputs_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, network_1.o(i.ai_network_1_inputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ai_network_1_inputs_get &rArr; ai_platform_inputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init
</UL>

<P><STRONG><a name="[a2]"></a>ai_network_1_outputs_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, network_1.o(i.ai_network_1_outputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ai_network_1_outputs_get &rArr; ai_platform_outputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init
</UL>

<P><STRONG><a name="[9b]"></a>ai_network_1_run</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, network_1.o(i.ai_network_1_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ai_network_1_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI1_Run
</UL>

<P><STRONG><a name="[24f]"></a>ai_padding_opt_init</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, st_padding_opt.o(i.ai_padding_opt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_padding_opt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_rgb_sssa8_ch
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dw_sssa8_ch
</UL>

<P><STRONG><a name="[251]"></a>ai_padding_opt_phase1</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, st_padding_opt.o(i.ai_padding_opt_phase1))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_rgb_sssa8_ch
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dw_sssa8_ch
</UL>

<P><STRONG><a name="[1ef]"></a>ai_platform_bind_network_params</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_bind_network_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_bind_network_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_data_params_get
</UL>

<P><STRONG><a name="[1f8]"></a>ai_platform_context_acquire</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_context_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>

<P><STRONG><a name="[1f9]"></a>ai_platform_get_activations_map</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_get_activations_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_get_activations_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_1_configure_activations
</UL>

<P><STRONG><a name="[1fb]"></a>ai_platform_get_weights_map</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_get_weights_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_get_weights_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_1_configure_weights
</UL>

<P><STRONG><a name="[1f5]"></a>ai_platform_inputs_get</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ai_platform_interface.o(i.ai_platform_inputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_platform_inputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_inputs_get
</UL>

<P><STRONG><a name="[1fc]"></a>ai_platform_interface_api_get_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_interface_api_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_platform_interface_api_get_version &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[1ec]"></a>ai_platform_network_create</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, ai_platform_interface.o(i.ai_platform_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_release_crc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_acquire_crc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_version_get
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_interface_api_get_version
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_create
</UL>

<P><STRONG><a name="[1f0]"></a>ai_platform_network_get_error</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_network_get_error &rArr; ai_platform_context_acquire &rArr; CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_get_error
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_get_error
</UL>

<P><STRONG><a name="[1f1]"></a>ai_platform_network_init</STRONG> (Thumb, 254 bytes, Stack size 104 bytes, ai_platform_interface.o(i.ai_platform_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ai_platform_network_init &rArr; _platform_ai_buffer_array_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_init_all
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_buffers_signature_valid
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_ai_buffer_array_copy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_init
</UL>

<P><STRONG><a name="[1f4]"></a>ai_platform_network_post_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_post_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_platform_network_post_init &rArr; ai_layers_post_init_all
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_post_init_all
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_init
</UL>

<P><STRONG><a name="[1f7]"></a>ai_platform_network_process</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_run
</UL>

<P><STRONG><a name="[1e0]"></a>ai_platform_network_set_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_platform_interface.o(i.ai_platform_network_set_error))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_1_configure_weights
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_1_configure_activations
</UL>

<P><STRONG><a name="[1f6]"></a>ai_platform_outputs_get</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ai_platform_interface.o(i.ai_platform_outputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_platform_outputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_outputs_get
</UL>

<P><STRONG><a name="[1fe]"></a>ai_version_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_datatypes_internal.o(i.ai_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[204]"></a>align_factor_ch</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, st_convolve_reference.o(i.align_factor_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = align_factor_ch &rArr; __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pw_sssa8_ch
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_sssa8_ch
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_3x3_sssa8_ch
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_rgb_sssa8_ch
</UL>

<P><STRONG><a name="[26c]"></a>arm_float_to_q15</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, arm_float_to_q15.o(i.arm_float_to_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_float_to_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[26d]"></a>arm_float_to_q7</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, arm_float_to_q7.o(i.arm_float_to_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_float_to_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[26e]"></a>arm_q15_to_float</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, arm_q15_to_float.o(i.arm_q15_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_q15_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[26f]"></a>arm_q7_to_float</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, arm_q7_to_float.o(i.arm_q7_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_q7_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[222]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1ff]"></a>core_get_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core_common.o(i.core_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>

<P><STRONG><a name="[1fd]"></a>core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_common.o(i.core_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[203]"></a>core_set_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, core_common.o(i.core_set_error))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
</UL>

<P><STRONG><a name="[d7]"></a>dci_capture_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_capture_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
</UL>

<P><STRONG><a name="[cc]"></a>dci_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f4xx_dci.o(i.dci_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dci_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
</UL>

<P><STRONG><a name="[d6]"></a>dci_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
</UL>

<P><STRONG><a name="[cd]"></a>dci_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_init))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
</UL>

<P><STRONG><a name="[cf]"></a>dci_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
</UL>

<P><STRONG><a name="[d0]"></a>dci_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCI_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>dci_interrupt_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCI_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>detectInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.detectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = detectInit &rArr; AI_Init &rArr; ai_network_1_create_and_init &rArr; ai_network_1_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFillPixel
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftware
</UL>

<P><STRONG><a name="[218]"></a>detect_once</STRONG> (Thumb, 1350 bytes, Stack size 240 bytes, main.o(i.detect_once))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = detect_once &rArr; LCDShowString &rArr; LCDShowChar &rArr; GetCNFont24x24 &rArr; GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDShowString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFillPixel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDrawPoint
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ai1
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[227]"></a>disk_initialize</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_initialize &rArr; InitFTL &rArr; FTLFormat &rArr; FTLBadBlockMark &rArr; NandWriteSpare &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFTL
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[229]"></a>disk_ioctl</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = disk_ioctl &rArr; sd_card_information_get
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_information_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[22b]"></a>disk_read</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = disk_read &rArr; FTLReadSectors &rArr; NandReadPage &rArr; NandECCCorrection &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_transfer_state_get
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLReadSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[246]"></a>disk_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[22f]"></a>disk_write</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_transfer_state_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTLWriteSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[234]"></a>dma_channel_disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_receive_config
</UL>

<P><STRONG><a name="[d5]"></a>dma_channel_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_receive_config
</UL>

<P><STRONG><a name="[d3]"></a>dma_channel_subperipheral_select</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gd32f4xx_dma.o(i.dma_channel_subperipheral_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_channel_subperipheral_select
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_receive_config
</UL>

<P><STRONG><a name="[d1]"></a>dma_deinit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_receive_config
</UL>

<P><STRONG><a name="[233]"></a>dma_flag_clear</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_receive_config
</UL>

<P><STRONG><a name="[28d]"></a>dma_flag_get</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[d4]"></a>dma_flow_controller_config</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, gd32f4xx_dma.o(i.dma_flow_controller_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_flow_controller_config
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_receive_config
</UL>

<P><STRONG><a name="[235]"></a>dma_multi_data_mode_init</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, gd32f4xx_dma.o(i.dma_multi_data_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_multi_data_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_receive_config
</UL>

<P><STRONG><a name="[d2]"></a>dma_single_data_mode_init</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, gd32f4xx_dma.o(i.dma_single_data_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_single_data_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
</UL>

<P><STRONG><a name="[197]"></a>exmc_ecc_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_exmc.o(i.exmc_ecc_get))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithWrite
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWritePage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadPage
</UL>

<P><STRONG><a name="[e6]"></a>exmc_flag_get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f4xx_exmc.o(i.exmc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
</UL>

<P><STRONG><a name="[196]"></a>exmc_nand_ecc_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f4xx_exmc.o(i.exmc_nand_ecc_config))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithWrite
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWritePage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadPage
</UL>

<P><STRONG><a name="[16b]"></a>exmc_nand_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_exmc.o(i.exmc_nand_enable))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
</UL>

<P><STRONG><a name="[16a]"></a>exmc_nand_init</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gd32f4xx_exmc.o(i.exmc_nand_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exmc_nand_init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
</UL>

<P><STRONG><a name="[e7]"></a>exmc_sdram_command_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_exmc.o(i.exmc_sdram_command_config))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
</UL>

<P><STRONG><a name="[e5]"></a>exmc_sdram_init</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, gd32f4xx_exmc.o(i.exmc_sdram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exmc_sdram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
</UL>

<P><STRONG><a name="[e8]"></a>exmc_sdram_refresh_count_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f4xx_exmc.o(i.exmc_sdram_refresh_count_set))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
</UL>

<P><STRONG><a name="[1aa]"></a>exti_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_exti.o(i.exti_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewName
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataFontLib
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFontLib
</UL>

<P><STRONG><a name="[c0]"></a>f_closedir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_closedir &rArr; validate
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDir
</UL>

<P><STRONG><a name="[b6]"></a>f_lseek</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
</UL>

<P><STRONG><a name="[bf]"></a>f_mkdir</STRONG> (Thumb, 328 bytes, Stack size 88 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDir
</UL>

<P><STRONG><a name="[11c]"></a>f_mount</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceMountSDCard
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceMountNandFlash
</UL>

<P><STRONG><a name="[a7]"></a>f_open</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enq_lock
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewName
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataFontLib
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFontLib
</UL>

<P><STRONG><a name="[be]"></a>f_opendir</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDir
</UL>

<P><STRONG><a name="[a9]"></a>f_read</STRONG> (Thumb, 464 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataFontLib
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFontLib
</UL>

<P><STRONG><a name="[237]"></a>f_sync</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[b7]"></a>f_write</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
</UL>

<P><STRONG><a name="[212]"></a>ff_convert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[20b]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[1]"></a>forward_concat</STRONG> (Thumb, 1148 bytes, Stack size 80 bytes, layers_generic_float.o(i.forward_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = forward_concat
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>forward_conv2d_rgb_sssa8_ch</STRONG> (Thumb, 598 bytes, Stack size 88 bytes, layers_conv2d_rgb_sssa8_ch.o(i.forward_conv2d_rgb_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = forward_conv2d_rgb_sssa8_ch &rArr; forward_lite_conv2d_rgb_sssa8_ch &rArr; st_sssa8_ch_nn_mat_mult_kernel_opt
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_rgb_sssa8_ch
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_factor_ch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>forward_dw_3x3_sssa8_ch</STRONG> (Thumb, 590 bytes, Stack size 128 bytes, layers_dw_sssa8_ch.o(i.forward_dw_3x3_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = forward_dw_3x3_sssa8_ch &rArr; forward_lite_dw_3x3_sssa8_ch &rArr; st_dw_sssa8_ch_Wadapt
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dw_3x3_sssa8_ch
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_factor_ch
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_ptr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>forward_dw_sssa8_ch</STRONG> (Thumb, 626 bytes, Stack size 152 bytes, layers_dw_sssa8_ch.o(i.forward_dw_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = forward_dw_sssa8_ch &rArr; forward_lite_dw_sssa8_ch &rArr; st_dw_sssa8_ch_Wadapt
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dw_sssa8_ch
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_factor_ch
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_ptr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>forward_gather</STRONG> (Thumb, 402 bytes, Stack size 80 bytes, layers_generic_float.o(i.forward_gather))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = forward_gather
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[248]"></a>forward_lite_conv2d_rgb_sssa8_ch</STRONG> (Thumb, 816 bytes, Stack size 312 bytes, forward_lite_conv2d_sssa8_ch.o(i.forward_lite_conv2d_rgb_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = forward_lite_conv2d_rgb_sssa8_ch &rArr; st_sssa8_ch_nn_mat_mult_kernel_opt
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_kernel_single_opt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_kernel_opt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_convolve_rank1upd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_to16_dual
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_padding_opt_phase2
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_padding_opt_phase1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_padding_opt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_rgb_sssa8_ch
</UL>

<P><STRONG><a name="[24b]"></a>forward_lite_dw_3x3_sssa8_ch</STRONG> (Thumb, 1976 bytes, Stack size 168 bytes, forward_lite_dw_sssa8_ch.o(i.forward_lite_dw_3x3_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = forward_lite_dw_3x3_sssa8_ch &rArr; st_dw_sssa8_ch_Wadapt
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dw_sssa8_ch_Wadapt
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_3x3_sssa8_ch
</UL>

<P><STRONG><a name="[24d]"></a>forward_lite_dw_sssa8_ch</STRONG> (Thumb, 1502 bytes, Stack size 288 bytes, forward_lite_dw_sssa8_ch.o(i.forward_lite_dw_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = forward_lite_dw_sssa8_ch &rArr; st_dw_sssa8_ch_Wadapt
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dw_sssa8_ch_Wadapt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_fill
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_padding_opt_phase1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_padding_opt_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_padding_opt_phase2
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_sssa8_ch
</UL>

<P><STRONG><a name="[274]"></a>forward_lite_node_convert_integer_is8ou8</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, forward_lite_convert.o(i.forward_lite_node_convert_integer_is8ou8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = forward_lite_node_convert_integer_is8ou8
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert_integer
</UL>

<P><STRONG><a name="[273]"></a>forward_lite_node_convert_integer_is8ou8_fast</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, forward_lite_convert.o(i.forward_lite_node_convert_integer_is8ou8_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = forward_lite_node_convert_integer_is8ou8_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert_integer
</UL>

<P><STRONG><a name="[272]"></a>forward_lite_node_convert_integer_iu8os8</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, forward_lite_convert.o(i.forward_lite_node_convert_integer_iu8os8))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert_integer
</UL>

<P><STRONG><a name="[271]"></a>forward_lite_node_convert_integer_iu8os8_fast</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, forward_lite_convert.o(i.forward_lite_node_convert_integer_iu8os8_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = forward_lite_node_convert_integer_iu8os8_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert_integer
</UL>

<P><STRONG><a name="[270]"></a>forward_lite_node_convert_integer_iu8ou8</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, forward_lite_convert.o(i.forward_lite_node_convert_integer_iu8ou8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = forward_lite_node_convert_integer_iu8ou8
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert_integer
</UL>

<P><STRONG><a name="[259]"></a>forward_lite_pw_sssa8_ch</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, forward_lite_pw_sssa8_ch.o(i.forward_lite_pw_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = forward_lite_pw_sssa8_ch &rArr; st_sssa8_ch_nn_mat_mult_nt_t &rArr; weights_2channels_prefetch
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_nt_t
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_fullW_prefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pw_sssa8_ch
</UL>

<P><STRONG><a name="[b]"></a>forward_mp_integer_INT8</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, layers_pool_stm32_integer.o(i.forward_mp_integer_INT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = forward_mp_integer_INT8 &rArr; pool_func_mp_array_integer_INT8 &rArr; st_int8_maxpool
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_func_mp_array_integer_INT8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>forward_pad</STRONG> (Thumb, 820 bytes, Stack size 136 bytes, layers_generic_float.o(i.forward_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = forward_pad &rArr; st_int8_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_fill
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>forward_pw_sssa8_ch</STRONG> (Thumb, 622 bytes, Stack size 128 bytes, layers_pw_sssa8_ch.o(i.forward_pw_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = forward_pw_sssa8_ch &rArr; forward_lite_pw_sssa8_ch &rArr; st_sssa8_ch_nn_mat_mult_nt_t &rArr; weights_2channels_prefetch
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pw_sssa8_ch
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_ptr
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_factor_ch
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>forward_sm</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.forward_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = forward_sm &rArr; _lite_nl_softmax_if32of32 &rArr; _lite_nl_softmax_if32of32_kernel &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_nl_softmax_if32of32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>forward_transpose</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, layers_generic_float.o(i.forward_transpose))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = forward_transpose &rArr; transpose_items
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose_items
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>forward_upsample</STRONG> (Thumb, 968 bytes, Stack size 72 bytes, layers_generic_float.o(i.forward_upsample))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = forward_upsample &rArr; __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart0.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[20d]"></a>get_fat</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[23a]"></a>get_fattime</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, diskio.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = get_fattime &rArr; RTCGetTime &rArr; rtc_current_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCGetTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCGetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1de]"></a>get_tensor_byte_size</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ai_datatypes_internal.o(i.get_tensor_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[c9]"></a>gpio_af_set</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCIGPIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCKOut0
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[ba]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigLEDGPIO
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlicker
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepCalcDown
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigBeepGPIO
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16X4KErase
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WriteEnable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WaitForWriteEnd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16PageProgram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QGPIO
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QAddr
</UL>

<P><STRONG><a name="[b9]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigLEDGPIO
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlicker
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepCalcDown
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigIICGPIO
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGD25QXX
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16X4KErase
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WriteEnable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WaitForWriteEnd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16PageProgram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QGPIO
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QAddr
</UL>

<P><STRONG><a name="[19c]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640PWDNSet
</UL>

<P><STRONG><a name="[12a]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDA
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NANDWaitRB
</UL>

<P><STRONG><a name="[c6]"></a>gpio_mode_set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigLEDGPIO
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigBeepGPIO
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPIO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCIGPIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCKOut0
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDAMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigIICGPIO
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGD25QXX
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDAMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QGPIO
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QAddr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[c7]"></a>gpio_output_options_set</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigLEDGPIO
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigBeepGPIO
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPIO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCIGPIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCKOut0
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDAMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigIICGPIO
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGD25QXX
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDAMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QGPIO
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QAddr
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[181]"></a>ipa_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f4xx_ipa.o(i.ipa_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipa_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
</UL>

<P><STRONG><a name="[184]"></a>ipa_destination_init</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, gd32f4xx_ipa.o(i.ipa_destination_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipa_destination_init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
</UL>

<P><STRONG><a name="[183]"></a>ipa_destination_struct_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_ipa.o(i.ipa_destination_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
</UL>

<P><STRONG><a name="[187]"></a>ipa_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_ipa.o(i.ipa_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
</UL>

<P><STRONG><a name="[186]"></a>ipa_interrupt_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_ipa.o(i.ipa_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
</UL>

<P><STRONG><a name="[182]"></a>ipa_pixel_format_convert_mode_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_ipa.o(i.ipa_pixel_format_convert_mode_set))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
</UL>

<P><STRONG><a name="[185]"></a>ipa_transfer_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_ipa.o(i.ipa_transfer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
</UL>

<P><STRONG><a name="[107]"></a>jd_decomp</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, tjpgd.o(i.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = jd_decomp &rArr; mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_output
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJPEGInFlash
</UL>

<P><STRONG><a name="[106]"></a>jd_prepare</STRONG> (Thumb, 924 bytes, Stack size 64 bytes, tjpgd.o(i.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_qt_tbl
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJPEGInFlash
</UL>

<P><STRONG><a name="[73]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = main &rArr; InitSoftware &rArr; InitCamera &rArr; InitGUI &rArr; InitGUIRadio &rArr; CreateRadioWidget &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_once
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc2msTask
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc1msTask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSoftware
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4]"></a>nl_func_array_integer</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, layers_nl_stm32_integer.o(i.nl_func_array_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nl_func_array_integer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>node_convert</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, core_convert.o(i.node_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = node_convert &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q7_to_float
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_q15_to_float
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q7
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_float_to_q15
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_integer_to_float
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_to_integer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>node_convert_integer</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, core_convert.o(i.node_convert_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = node_convert_integer &rArr; forward_lite_node_convert_integer_iu8os8_fast
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_iu8ou8
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_iu8os8_fast
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_iu8os8
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_is8ou8_fast
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_is8ou8
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network_1.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>nvic_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f4xx_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer1
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[e0]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigNVIC
</UL>

<P><STRONG><a name="[25c]"></a>pool_func_mp_array_integer_INT8</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, layers_pool_stm32_integer.o(i.pool_func_mp_array_integer_INT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = pool_func_mp_array_integer_INT8 &rArr; st_int8_maxpool
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_maxpool
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_mp_integer_INT8
</UL>

<P><STRONG><a name="[20e]"></a>put_fat</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[ca]"></a>rcu_ckout0_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f4xx_rcu.o(i.rcu_ckout0_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_ckout0_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCKOut0
</UL>

<P><STRONG><a name="[219]"></a>rcu_clock_freq_get</STRONG> (Thumb, 264 bytes, Stack size 84 bytes, gd32f4xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_once
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[27f]"></a>rcu_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[15c]"></a>rcu_osci_on</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[15d]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, gd32f4xx_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[9f]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDFill
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDClear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigLEDGPIO
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCI
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigBeepGPIO
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGPIO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDCIGPIO
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCKOut0
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDAMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigIICGPIO
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGD25QXX
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDAMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QGPIO
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigGT1151QAddr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer1
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNandFlash
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigSDRAM
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[217]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_deinit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_deinit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_deinit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_deinit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[216]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tli_deinit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipa_deinit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_deinit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_deinit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[15a]"></a>rcu_pllsai_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gd32f4xx_rcu.o(i.rcu_pllsai_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_pllsai_config
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[e2]"></a>rcu_timer_clock_prescaler_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_timer_clock_prescaler_config))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigRCU
</UL>

<P><STRONG><a name="[15b]"></a>rcu_tli_clock_div_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_tli_clock_div_config))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[1a5]"></a>rtc_current_time_get</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, gd32f4xx_rtc.o(i.rtc_current_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_current_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCGetTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCGetDate
</UL>

<P><STRONG><a name="[1a9]"></a>rtc_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_rtc.o(i.rtc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>rtc_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_rtc.o(i.rtc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[21a]"></a>run_ai1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(i.run_ai1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = run_ai1 &rArr; run_ai1_part &rArr; AI1_Run &rArr; ai_network_1_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ai1_part
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_once
</UL>

<P><STRONG><a name="[280]"></a>run_ai1_part</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, main.o(i.run_ai1_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = run_ai1_part &rArr; AI1_Run &rArr; ai_network_1_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI1_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ai1
</UL>

<P><STRONG><a name="[22c]"></a>sd_block_read</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, sdcard.o(i.sd_block_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sd_block_read &rArr; dma_receive_config &rArr; dma_multi_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_interrupt_enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dsm_enable
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dsm_disable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dma_enable
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dma_disable
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_transfer_config
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_read
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_datablocksize_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[230]"></a>sd_block_write</STRONG> (Thumb, 760 bytes, Stack size 56 bytes, sdcard.o(i.sd_block_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sd_block_write &rArr; dma_transfer_config &rArr; dma_multi_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_interrupt_enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dsm_enable
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dsm_disable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dma_enable
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dma_disable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_transfer_config
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_datablocksize_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_state_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[290]"></a>sd_bus_mode_config</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sdcard.o(i.sd_bus_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sd_bus_mode_config &rArr; sd_bus_width_config &rArr; sd_scr_get &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_hardware_clock_disable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_clock_config
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_mode_set
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_width_config
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_config
</UL>

<P><STRONG><a name="[22a]"></a>sd_card_information_get</STRONG> (Thumb, 686 bytes, Stack size 12 bytes, sdcard.o(i.sd_card_information_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sd_card_information_get
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[296]"></a>sd_card_init</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, sdcard.o(i.sd_card_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sd_card_init &rArr; r6_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_power_state_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r6_error_check
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_error_check
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[298]"></a>sd_card_select_deselect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sdcard.o(i.sd_card_select_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sd_card_select_deselect &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_config
</UL>

<P><STRONG><a name="[299]"></a>sd_cardstatus_get</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sdcard.o(i.sd_cardstatus_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sd_cardstatus_get &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_config
</UL>

<P><STRONG><a name="[228]"></a>sd_config</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sdcard.o(i.sd_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sd_config &rArr; sd_bus_mode_config &rArr; sd_bus_width_config &rArr; sd_scr_get &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_transfer_mode_config
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cardstatus_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_select_deselect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_information_get
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_mode_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[29a]"></a>sd_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sdcard.o(i.sd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sd_init &rArr; sd_power_on &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_hardware_clock_disable
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_deinit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_clock_config
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_mode_set
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_config
</UL>

<P><STRONG><a name="[1ae]"></a>sd_interrupts_process</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, sdcard.o(i.sd_interrupts_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sd_interrupts_process &rArr; sd_transfer_stop &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_interrupt_flag_get
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_interrupt_flag_clear
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_interrupt_disable
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_transfer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[22d]"></a>sd_multiblocks_read</STRONG> (Thumb, 632 bytes, Stack size 48 bytes, sdcard.o(i.sd_multiblocks_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sd_multiblocks_read &rArr; dma_receive_config &rArr; dma_multi_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_interrupt_enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dsm_enable
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dsm_disable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dma_enable
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dma_disable
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_transfer_config
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_read
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_datablocksize_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[231]"></a>sd_multiblocks_write</STRONG> (Thumb, 878 bytes, Stack size 56 bytes, sdcard.o(i.sd_multiblocks_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sd_multiblocks_write &rArr; dma_transfer_config &rArr; dma_multi_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_interrupt_enable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dsm_enable
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dsm_disable
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dma_enable
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dma_disable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_transfer_config
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_datablocksize_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_state_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[29d]"></a>sd_power_on</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, sdcard.o(i.sd_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sd_power_on &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_power_state_set
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_hardware_clock_disable
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_clock_enable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_clock_config
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_mode_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r7_error_check
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r3_error_check
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdsent_error_check
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[29b]"></a>sd_transfer_mode_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdcard.o(i.sd_transfer_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_config
</UL>

<P><STRONG><a name="[22e]"></a>sd_transfer_state_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdcard.o(i.sd_transfer_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_transfer_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[29f]"></a>sd_transfer_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sdcard.o(i.sd_transfer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sd_transfer_stop &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_interrupts_process
</UL>

<P><STRONG><a name="[293]"></a>sdio_bus_mode_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_bus_mode_set))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_mode_config
</UL>

<P><STRONG><a name="[292]"></a>sdio_clock_config</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, gd32f4xx_sdio.o(i.sdio_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sdio_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_mode_config
</UL>

<P><STRONG><a name="[2a3]"></a>sdio_clock_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[277]"></a>sdio_command_index_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_command_index_get))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_state_get
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r6_error_check
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
</UL>

<P><STRONG><a name="[286]"></a>sdio_command_response_config</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, gd32f4xx_sdio.o(i.sdio_command_response_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sdio_command_response_config
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_transfer_stop
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cardstatus_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_select_deselect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_state_get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_width_config
</UL>

<P><STRONG><a name="[288]"></a>sdio_csm_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_csm_enable))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_transfer_stop
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cardstatus_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_select_deselect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_state_get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_width_config
</UL>

<P><STRONG><a name="[281]"></a>sdio_data_config</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gd32f4xx_sdio.o(i.sdio_data_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdio_data_config
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
</UL>

<P><STRONG><a name="[28a]"></a>sdio_data_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
</UL>

<P><STRONG><a name="[282]"></a>sdio_data_transfer_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_data_transfer_config))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
</UL>

<P><STRONG><a name="[28e]"></a>sdio_data_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_data_write))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
</UL>

<P><STRONG><a name="[29c]"></a>sdio_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f4xx_sdio.o(i.sdio_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdio_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[284]"></a>sdio_dma_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_dma_disable))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[28c]"></a>sdio_dma_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_dma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[283]"></a>sdio_dsm_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_dsm_disable))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[289]"></a>sdio_dsm_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_dsm_enable))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
</UL>

<P><STRONG><a name="[209]"></a>sdio_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_state_get
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r7_error_check
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r6_error_check
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r3_error_check
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r2_error_check
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdsent_error_check
</UL>

<P><STRONG><a name="[208]"></a>sdio_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_transfer_state_get
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdsent_error_check
</UL>

<P><STRONG><a name="[294]"></a>sdio_hardware_clock_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_hardware_clock_disable))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_mode_config
</UL>

<P><STRONG><a name="[2a1]"></a>sdio_interrupt_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_interrupts_process
</UL>

<P><STRONG><a name="[28b]"></a>sdio_interrupt_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[2a0]"></a>sdio_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_interrupts_process
</UL>

<P><STRONG><a name="[29e]"></a>sdio_interrupt_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_interrupts_process
</UL>

<P><STRONG><a name="[297]"></a>sdio_power_state_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_power_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[2a2]"></a>sdio_power_state_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_power_state_set))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[278]"></a>sdio_response_get</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_response_get))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cardstatus_get
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_state_get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_width_config
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r6_error_check
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
</UL>

<P><STRONG><a name="[287]"></a>sdio_wait_type_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_sdio.o(i.sdio_wait_type_set))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_transfer_stop
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cardstatus_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_select_deselect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_state_get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_width_config
</UL>

<P><STRONG><a name="[176]"></a>spi_crc_polynomial_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_crc_polynomial_set))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
</UL>

<P><STRONG><a name="[173]"></a>spi_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
</UL>

<P><STRONG><a name="[177]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
</UL>

<P><STRONG><a name="[1b1]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadWriteByte
</UL>

<P><STRONG><a name="[1b0]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadWriteByte
</UL>

<P><STRONG><a name="[1af]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadWriteByte
</UL>

<P><STRONG><a name="[175]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
</UL>

<P><STRONG><a name="[174]"></a>spi_struct_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSPI4
</UL>

<P><STRONG><a name="[255]"></a>st_dw_sssa8_ch_Wadapt</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, forward_lite_dw_sssa8_ch.o(i.st_dw_sssa8_ch_Wadapt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = st_dw_sssa8_ch_Wadapt
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dw_sssa8_ch
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dw_3x3_sssa8_ch
</UL>

<P><STRONG><a name="[258]"></a>st_int8_copy</STRONG> (Thumb, 292 bytes, Stack size 20 bytes, st_int8_fill.o(i.st_int8_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dw_sssa8_ch
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad
</UL>

<P><STRONG><a name="[257]"></a>st_int8_fill</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, st_int8_fill.o(i.st_int8_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = st_int8_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dw_sssa8_ch
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad
</UL>

<P><STRONG><a name="[275]"></a>st_int8_maxpool</STRONG> (Thumb, 656 bytes, Stack size 84 bytes, st_int8_pool.o(i.st_int8_maxpool))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = st_int8_maxpool
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_func_mp_array_integer_INT8
</UL>

<P><STRONG><a name="[250]"></a>st_int8_to16_dual</STRONG> (Thumb, 606 bytes, Stack size 36 bytes, st_int8_to16_no_shift.o(i.st_int8_to16_dual))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = st_int8_to16_dual
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_rgb_sssa8_ch
</UL>

<P><STRONG><a name="[24e]"></a>st_sssa8_ch_convolve_rank1upd</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, st_sssa8_ch_convolve.o(i.st_sssa8_ch_convolve_rank1upd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = st_sssa8_ch_convolve_rank1upd
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_rgb_sssa8_ch
</UL>

<P><STRONG><a name="[25a]"></a>st_sssa8_ch_fullW_prefetch</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, st_sssa8_ch_nn_mat_mult_nt_t.o(i.st_sssa8_ch_fullW_prefetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = st_sssa8_ch_fullW_prefetch &rArr; weights_2channels_prefetch
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weights_2channels_prefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pw_sssa8_ch
</UL>

<P><STRONG><a name="[253]"></a>st_sssa8_ch_nn_mat_mult_kernel_opt</STRONG> (Thumb, 1322 bytes, Stack size 124 bytes, st_sssa8_ch_nn_mat_mult_kernel_opt.o(i.st_sssa8_ch_nn_mat_mult_kernel_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = st_sssa8_ch_nn_mat_mult_kernel_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_rgb_sssa8_ch
</UL>

<P><STRONG><a name="[254]"></a>st_sssa8_ch_nn_mat_mult_kernel_single_opt</STRONG> (Thumb, 858 bytes, Stack size 60 bytes, st_sssa8_ch_nn_mat_mult_kernel_opt.o(i.st_sssa8_ch_nn_mat_mult_kernel_single_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = st_sssa8_ch_nn_mat_mult_kernel_single_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_rgb_sssa8_ch
</UL>

<P><STRONG><a name="[25b]"></a>st_sssa8_ch_nn_mat_mult_nt_t</STRONG> (Thumb, 2040 bytes, Stack size 196 bytes, st_sssa8_ch_nn_mat_mult_nt_t.o(i.st_sssa8_ch_nn_mat_mult_nt_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = st_sssa8_ch_nn_mat_mult_nt_t &rArr; weights_2channels_prefetch
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weights_offset_contribution_calc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weights_2channels_prefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pw_sssa8_ch
</UL>

<P><STRONG><a name="[ea]"></a>timer_deinit</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, gd32f4xx_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer1
</UL>

<P><STRONG><a name="[ee]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer1
</UL>

<P><STRONG><a name="[ec]"></a>timer_init</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer1
</UL>

<P><STRONG><a name="[ed]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer1
</UL>

<P><STRONG><a name="[1b8]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1b7]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>timer_struct_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigTimer1
</UL>

<P><STRONG><a name="[18d]"></a>tli_color_key_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_color_key_disable))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerWindowSet
</UL>

<P><STRONG><a name="[158]"></a>tli_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f4xx_tli.o(i.tli_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tli_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[163]"></a>tli_dither_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_dither_config))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[165]"></a>tli_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_enable))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[15e]"></a>tli_init</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_init))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[189]"></a>tli_layer_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_layer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerDisable
</UL>

<P><STRONG><a name="[18a]"></a>tli_layer_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_layer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerEnable
</UL>

<P><STRONG><a name="[18c]"></a>tli_layer_init</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_layer_init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerWindowSet
</UL>

<P><STRONG><a name="[18b]"></a>tli_layer_struct_para_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_layer_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerWindowSet
</UL>

<P><STRONG><a name="[18e]"></a>tli_lut_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_lut_disable))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerWindowSet
</UL>

<P><STRONG><a name="[164]"></a>tli_reload_config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_reload_config))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDTransparencySet
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerWindowSet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerEnable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDLayerDisable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[159]"></a>tli_struct_para_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f4xx_tli.o(i.tli_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[f2]"></a>usart_baudrate_set</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gd32f4xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[1bc]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>usart_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[f8]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[261]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1c0]"></a>usart_interrupt_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[1bb]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f4xx_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[f6]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[f3]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[f7]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[f4]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigUART
</UL>

<P><STRONG><a name="[2a4]"></a>weights_2channels_prefetch</STRONG> (Thumb, 400 bytes, Stack size 36 bytes, st_sssa8_ch_nn_mat_mult_nt_t.o(i.weights_2channels_prefetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = weights_2channels_prefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_nt_t
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_fullW_prefetch
</UL>

<P><STRONG><a name="[2a5]"></a>weights_offset_contribution_calc</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, st_sssa8_ch_nn_mat_mult_nt_t.o(i.weights_offset_contribution_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = weights_offset_contribution_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_nt_t
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9a]"></a>AI1_Run</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, main.o(i.AI1_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AI1_Run &rArr; ai_network_1_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_run
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_get_error
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ai1_part
</UL>

<P><STRONG><a name="[9e]"></a>AI_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.AI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AI_Init &rArr; ai_network_1_create_and_init &rArr; ai_network_1_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_outputs_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_inputs_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_create_and_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectInit
</UL>

<P><STRONG><a name="[150]"></a>InitHardware</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.InitHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = InitHardware &rArr; SystemInit &rArr; InitSDRAM &rArr; ConfigSDRAM &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART2
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART0
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysTick
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRCU
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVIC
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>InitSoftware</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.InitSoftware))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = InitSoftware &rArr; InitCamera &rArr; InitGUI &rArr; InitGUIRadio &rArr; CreateRadioWidget &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTouch
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLED
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFontLib
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCamera
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBeep
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectInit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>Proc1msTask</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.Proc1msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Proc1msTask &rArr; ScanTouch &rArr; ScanGT1151Q &rArr; IICCommonWriteBytesEx &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTouch
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get1msFlag
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr1msFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a1]"></a>Proc2msTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.Proc2msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Proc2msTask &rArr; LEDFlicker
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlicker
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get2msFlag
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr2msFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>ConfigLEDGPIO</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, led.o(i.ConfigLEDGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigLEDGPIO &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLED
</UL>

<P><STRONG><a name="[210]"></a>alloc_pool</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tjpgd.o(i.alloc_pool))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_qt_tbl
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
</UL>

<P><STRONG><a name="[267]"></a>bitext</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tjpgd.o(i.bitext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[268]"></a>block_idct</STRONG> (Thumb, 676 bytes, Stack size 64 bytes, tjpgd.o(i.block_idct))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = block_idct
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[20f]"></a>create_huffman_tbl</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, tjpgd.o(i.create_huffman_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[215]"></a>create_qt_tbl</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tjpgd.o(i.create_qt_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_qt_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[266]"></a>huffext</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, tjpgd.o(i.huffext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = huffext
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[264]"></a>mcu_load</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, tjpgd.o(i.mcu_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_idct
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[265]"></a>mcu_output</STRONG> (Thumb, 910 bytes, Stack size 104 bytes, tjpgd.o(i.mcu_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mcu_output
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[263]"></a>restart</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tjpgd.o(i.restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = restart
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[da]"></a>ConfigGT1151QAddr</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, gt1151q.o(i.ConfigGT1151QAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigGT1151QAddr &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGT1151Q
</UL>

<P><STRONG><a name="[dc]"></a>ConfigGT1151QGPIO</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, gt1151q.o(i.ConfigGT1151QGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigGT1151QGPIO &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGT1151Q
</UL>

<P><STRONG><a name="[7f]"></a>ConfigSDAMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gt1151q.o(i.ConfigSDAMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigSDAMode &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt1151q.o(i.InitGT1151Q)
</UL>
<P><STRONG><a name="[80]"></a>Delay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gt1151q.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay &rArr; DelayNus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt1151q.o(i.InitGT1151Q)
</UL>
<P><STRONG><a name="[7e]"></a>GetSDA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gt1151q.o(i.GetSDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt1151q.o(i.InitGT1151Q)
</UL>
<P><STRONG><a name="[7c]"></a>SetSCL</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt1151q.o(i.SetSCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSCL
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt1151q.o(i.InitGT1151Q)
</UL>
<P><STRONG><a name="[7d]"></a>SetSDA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt1151q.o(i.SetSDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt1151q.o(i.InitGT1151Q)
</UL>
<P><STRONG><a name="[1b3]"></a>Abs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, touch.o(i.Abs))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTouch
</UL>

<P><STRONG><a name="[c4]"></a>DrawBackground</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, radiowidget.o(i.DrawBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIFillColor
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawImage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawBackground
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRadioWidget
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRadioWidgetFocus
</UL>

<P><STRONG><a name="[fd]"></a>DrawBackground</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, buttonwidget.o(i.DrawBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIFillColor
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawImage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawBackground
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateButtonWidget
</UL>

<P><STRONG><a name="[fe]"></a>DrawText</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, buttonwidget.o(i.DrawText))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DrawText &rArr; GUIDrawTextLine &rArr; GUIDrawChar &rArr; LCDShowChar &rArr; GetCNFont24x24 &rArr; GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontWidth
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawTextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateButtonWidget
</UL>

<P><STRONG><a name="[11d]"></a>GD25Q16PageProgram</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gd25qxx.o(i.GD25Q16PageProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GD25Q16PageProgram &rArr; GD25Q16WriteEnable &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadWriteByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WriteEnable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16WaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Write
</UL>

<P><STRONG><a name="[120]"></a>GD25Q16WaitForWriteEnd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd25qxx.o(i.GD25Q16WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GD25Q16WaitForWriteEnd &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16X4KErase
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16PageProgram
</UL>

<P><STRONG><a name="[11e]"></a>GD25Q16WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd25qxx.o(i.GD25Q16WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GD25Q16WriteEnable &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16X4KErase
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16PageProgram
</UL>

<P><STRONG><a name="[dd]"></a>ConfigIICGPIO</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sccb.o(i.ConfigIICGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigIICGPIO &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSCCB
</UL>

<P><STRONG><a name="[87]"></a>ConfigSDAMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sccb.o(i.ConfigSDAMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigSDAMode &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sccb.o(i.InitSCCB)
</UL>
<P><STRONG><a name="[88]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sccb.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay &rArr; DelayNus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sccb.o(i.InitSCCB)
</UL>
<P><STRONG><a name="[86]"></a>GetSDA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sccb.o(i.GetSDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sccb.o(i.InitSCCB)
</UL>
<P><STRONG><a name="[84]"></a>SetSCL</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sccb.o(i.SetSCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSCL
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sccb.o(i.InitSCCB)
</UL>
<P><STRONG><a name="[85]"></a>SetSDA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sccb.o(i.SetSDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sccb.o(i.InitSCCB)
</UL>
<P><STRONG><a name="[c8]"></a>ConfigCKOut0</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dci.o(i.ConfigCKOut0))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigCKOut0 &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ckout0_config
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDCI
</UL>

<P><STRONG><a name="[d8]"></a>ConfigDCIGPIO</STRONG> (Thumb, 458 bytes, Stack size 8 bytes, dci.o(i.ConfigDCIGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigDCIGPIO &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDCI
</UL>

<P><STRONG><a name="[d9]"></a>ConfigGPIO</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ov2640.o(i.ConfigGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigGPIO &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOV2640
</UL>

<P><STRONG><a name="[79]"></a>NextCallback</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, camera.o(i.NextCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NextCallback &rArr; OV2640SpecialEffects &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640SpecialEffects
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640LightMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640Contrast
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640ColorSaturation
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640Brightness
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(i.InitCamera)
</UL>
<P><STRONG><a name="[78]"></a>PreviouCallback</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, camera.o(i.PreviouCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PreviouCallback &rArr; OV2640SpecialEffects &rArr; SCCBWriteReg &rArr; IICCommonWriteBytes &rArr; IICCommonSendOneByte &rArr; IICCommonReadACK
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640SpecialEffects
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640LightMode
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640Contrast
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640ColorSaturation
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV2640Brightness
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(i.InitCamera)
</UL>
<P><STRONG><a name="[7a]"></a>RadioChange</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, camera.o(i.RadioChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RadioChange &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(i.InitCamera)
</UL>
<P><STRONG><a name="[7b]"></a>TakePhotoCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, camera.o(i.TakePhotoCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = TakePhotoCallback &rArr; ScreeShot &rArr; BMPEncodeWithRGB565 &rArr; CheckDir &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreeShot
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepWithTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera.o(i.InitCamera)
</UL>
<P><STRONG><a name="[c5]"></a>ConfigBeepGPIO</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, beep.o(i.ConfigBeepGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ConfigBeepGPIO &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBeep
</UL>

<P><STRONG><a name="[b4]"></a>CheckDir</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, bmpencoder.o(i.CheckDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = CheckDir &rArr; f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
</UL>

<P><STRONG><a name="[b5]"></a>GetNewName</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bmpencoder.o(i.GetNewName))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = GetNewName &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFree
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMalloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPEncodeWithRGB565
</UL>

<P><STRONG><a name="[c1]"></a>CheckFontLib</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, fontlib.o(i.CheckFontLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = CheckFontLib &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFree
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMalloc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16Read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitFontLib
</UL>

<P><STRONG><a name="[207]"></a>cmdsent_error_check</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sdcard.o(i.cmdsent_error_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmdsent_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[232]"></a>dma_receive_config</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, sdcard.o(i.dma_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dma_receive_config &rArr; dma_multi_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flow_controller_config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_subperipheral_select
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_multi_data_mode_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[236]"></a>dma_transfer_config</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, sdcard.o(i.dma_transfer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dma_transfer_config &rArr; dma_multi_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flow_controller_config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_subperipheral_select
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_multi_data_mode_init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
</UL>

<P><STRONG><a name="[262]"></a>gpio_config</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, sdcard.o(i.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_config &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[276]"></a>r1_error_check</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdcard.o(i.r1_error_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_index_get
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_type_check
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_transfer_stop
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cardstatus_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_select_deselect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_width_config
</UL>

<P><STRONG><a name="[279]"></a>r1_error_type_check</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, sdcard.o(i.r1_error_type_check))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_state_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
</UL>

<P><STRONG><a name="[27a]"></a>r2_error_check</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdcard.o(i.r2_error_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r2_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[27b]"></a>r3_error_check</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdcard.o(i.r3_error_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r3_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[27c]"></a>r6_error_check</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sdcard.o(i.r6_error_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = r6_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_index_get
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[27d]"></a>r7_error_check</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdcard.o(i.r7_error_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = r7_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_power_on
</UL>

<P><STRONG><a name="[27e]"></a>rcu_config</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sdcard.o(i.rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_init
</UL>

<P><STRONG><a name="[291]"></a>sd_bus_width_config</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, sdcard.o(i.sd_bus_width_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sd_bus_width_config &rArr; sd_scr_get &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_scr_get
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_mode_config
</UL>

<P><STRONG><a name="[28f]"></a>sd_card_state_get</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sdcard.o(i.sd_card_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sd_card_state_get &rArr; sdio_command_response_config
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_response_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_index_get
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_type_check
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
</UL>

<P><STRONG><a name="[285]"></a>sd_datablocksize_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sdcard.o(i.sd_datablocksize_get))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[295]"></a>sd_scr_get</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, sdcard.o(i.sd_scr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sd_scr_get &rArr; r1_error_check
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_wait_type_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_flag_clear
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_dsm_enable
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_transfer_config
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_read
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_data_config
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_csm_enable
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_command_response_config
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r1_error_check
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_bus_width_config
</UL>

<P><STRONG><a name="[190]"></a>FreeMemory</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, malloc.o(i.FreeMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFree
</UL>

<P><STRONG><a name="[191]"></a>MallocMemory</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, malloc.o(i.MallocMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MallocMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMalloc
</UL>

<P><STRONG><a name="[169]"></a>SetMemory</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.SetMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
</UL>

<P><STRONG><a name="[82]"></a>ButtonPressCallback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, guibutton.o(i.ButtonPressCallback))
<BR>[Address Reference Count : 1]<UL><LI> guibutton.o(i.InitGUIButton)
</UL>
<P><STRONG><a name="[83]"></a>RadioPressCallback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, guiradio.o(i.RadioPressCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = RadioPressCallback &rArr; ClearRadioWidgetFocus &rArr; DrawBackground &rArr; GUIDrawImage &rArr; DisplayBMP &rArr; BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRadioWidgetFocus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiradio.o(i.InitGUIRadio)
</UL>
<P><STRONG><a name="[104]"></a>DisplayBackground</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, guitop.o(i.DisplayBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DisplayBackground &rArr; DisplayJPEGInFlash &rArr; jd_decomp &rArr; mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJPEGInFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUI
</UL>

<P><STRONG><a name="[81]"></a>UpdataString</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, guitop.o(i.UpdataString))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = UpdataString &rArr; GUIDrawTextLine &rArr; GUIDrawChar &rArr; LCDShowChar &rArr; GetCNFont24x24 &rArr; GD25Q16Read &rArr; SPI4ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawTextLine
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIDrawBackground
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guitop.o(i.InitGUI)
</UL>
<P><STRONG><a name="[a3]"></a>BMPDisplayInFatFs</STRONG> (Thumb, 640 bytes, Stack size 88 bytes, bmp.o(i.BMPDisplayInFatFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = BMPDisplayInFatFs &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDReadPoint
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDrawPoint
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyFree
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyMalloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineInFatFs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeaderInFatFs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceMountSDCard
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceMountNandFlash
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAlphaRGB555
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBMP
</UL>

<P><STRONG><a name="[b0]"></a>BMPDisplayInMem</STRONG> (Thumb, 446 bytes, Stack size 80 bytes, bmp.o(i.BMPDisplayInMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BMPDisplayInMem &rArr; CalcAlphaRGB555
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDReadPoint
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDrawPoint
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineInMem
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeaderInMem
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAlphaRGB555
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBMP
</UL>

<P><STRONG><a name="[ae]"></a>CalcAlphaRGB555</STRONG> (Thumb, 136 bytes, Stack size 44 bytes, bmp.o(i.CalcAlphaRGB555))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CalcAlphaRGB555
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInMem
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
</UL>

<P><STRONG><a name="[a6]"></a>ForceMountNandFlash</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bmp.o(i.ForceMountNandFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ForceMountNandFlash &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
</UL>

<P><STRONG><a name="[a5]"></a>ForceMountSDCard</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bmp.o(i.ForceMountSDCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ForceMountSDCard &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNms
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
</UL>

<P><STRONG><a name="[ab]"></a>GetHeaderInFatFs</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bmp.o(i.GetHeaderInFatFs))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
</UL>

<P><STRONG><a name="[b1]"></a>GetHeaderInMem</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bmp.o(i.GetHeaderInMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetHeaderInMem
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInMem
</UL>

<P><STRONG><a name="[ac]"></a>GetLineInFatFs</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bmp.o(i.GetLineInFatFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetLineInFatFs
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInFatFs
</UL>

<P><STRONG><a name="[b2]"></a>GetLineInMem</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, bmp.o(i.GetLineInMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetLineInMem
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMPDisplayInMem
</UL>

<P><STRONG><a name="[76]"></a>JpegInfunc</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, jpeg.o(i.JpegInfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JpegInfunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg.o(i.DisplayJPEGInFlash)
</UL>
<P><STRONG><a name="[77]"></a>JpegOutfunc</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, jpeg.o(i.JpegOutfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = JpegOutfunc &rArr; LCDColorFillPixel &rArr; LCDDrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDColorFillPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpeg.o(i.DisplayJPEGInFlash)
</UL>
<P><STRONG><a name="[e1]"></a>ConfigRCU</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rcu.o(i.ConfigRCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConfigRCU
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRCU
</UL>

<P><STRONG><a name="[e9]"></a>ConfigTimer1</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, timer.o(i.ConfigTimer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ConfigTimer1 &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[ef]"></a>ConfigTimer4</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, timer.o(i.ConfigTimer4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ConfigTimer4 &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[f0]"></a>ConfigUART</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, uart0.o(i.ConfigUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ConfigUART &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART0
</UL>

<P><STRONG><a name="[17c]"></a>InitUARTBuf</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart0.o(i.InitUARTBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitUARTBuf &rArr; InitQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART0
</UL>

<P><STRONG><a name="[1ab]"></a>ReadSendBuf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart0.o(i.ReadSendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadSendBuf &rArr; DeQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>WriteReceiveBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart0.o(i.WriteReceiveBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteReceiveBuf &rArr; EnQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>ConfigSDRAM</STRONG> (Thumb, 1856 bytes, Stack size 112 bytes, sdram.o(i.ConfigSDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ConfigSDRAM &rArr; gpio_af_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_sdram_refresh_count_set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_sdram_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_sdram_command_config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSDRAM
</UL>

<P><STRONG><a name="[192]"></a>NANDWaitRB</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nandflash.o(i.NANDWaitRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NANDWaitRB
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithoutWrite
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithWrite
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadSpare
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadPage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCheckPage
</UL>

<P><STRONG><a name="[193]"></a>NandDelay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nandflash.o(i.NandDelay))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadStatus
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadID
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithoutWrite
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCopyPageWithWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWriteSpare
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandWritePage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadSpare
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandReadPage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandEraseBlock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NandCheckPage
</UL>

<P><STRONG><a name="[1a6]"></a>BcdToDec</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(i.BcdToDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BcdToDec
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCGetTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCGetDate
</UL>

<P><STRONG><a name="[fa]"></a>ConfigUART2</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, uart2.o(i.ConfigUART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ConfigUART2 &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART2
</UL>

<P><STRONG><a name="[17d]"></a>InitUARTBuf</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart2.o(i.InitUARTBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitUARTBuf &rArr; InitQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUART2
</UL>

<P><STRONG><a name="[1ad]"></a>ReadSendBuf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart2.o(i.ReadSendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadSendBuf &rArr; DeQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>WriteReceiveBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart2.o(i.WriteReceiveBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteReceiveBuf &rArr; EnQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[205]"></a>check_fs</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[213]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[242]"></a>chk_lock</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[241]"></a>clear_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[20a]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[20c]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[211]"></a>create_name</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[239]"></a>dec_lock</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ff.o(i.dec_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[21b]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[21e]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[21d]"></a>dir_next</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[223]"></a>dir_register</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[21c]"></a>dir_sdi</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[243]"></a>enq_lock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.enq_lock))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[23b]"></a>find_volume</STRONG> (Thumb, 702 bytes, Stack size 80 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[226]"></a>fit_lfn</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[23c]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[225]"></a>gen_numname</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[240]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[245]"></a>inc_lock</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[244]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[220]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[224]"></a>mem_cpy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[214]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[206]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[23e]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[23d]"></a>st_clust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[21f]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[23f]"></a>sync_fs</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[221]"></a>sync_window</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sync_window &rArr; disk_write &rArr; FTLWriteSectors &rArr; NandCopyBlockWithWrite &rArr; NandCopyBlockWithoutWrite &rArr; NandCopyPageWithoutWrite &rArr; NandWaitReady &rArr; NandReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[238]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[df]"></a>ConfigNVIC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nvic.o(i.ConfigNVIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConfigNVIC
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitNVIC
</UL>

<P><STRONG><a name="[1b5]"></a>TimDelayDec</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.TimDelayDec))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[17b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysTick
</UL>

<P><STRONG><a name="[2a6]"></a>system_clock_240m_25m_hxtal</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, system_gd32f4xx.o(i.system_clock_240m_25m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[1b6]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_240m_25m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f3]"></a>network_1_configure_activations</STRONG> (Thumb, 6426 bytes, Stack size 16 bytes, network_1.o(i.network_1_configure_activations))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = network_1_configure_activations &rArr; ai_platform_get_activations_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_init
</UL>

<P><STRONG><a name="[1f2]"></a>network_1_configure_weights</STRONG> (Thumb, 6898 bytes, Stack size 16 bytes, network_1.o(i.network_1_configure_weights))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = network_1_configure_weights &rArr; ai_platform_get_weights_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_1_init
</UL>

<P><STRONG><a name="[bb]"></a>CRC_Lock</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ai_platform_interface.o(i.CRC_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_release_crc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_acquire_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_interface_api_get_version
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>

<P><STRONG><a name="[1d2]"></a>_ai_platform_get_io_buffers_info</STRONG> (Thumb, 218 bytes, Stack size 136 bytes, ai_platform_interface.o(i._ai_platform_get_io_buffers_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>

<P><STRONG><a name="[1d8]"></a>_platform_ai_buffer_array_copy</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_ai_buffer_array_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_ai_buffer_array_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[1fa]"></a>_platform_get_table_map_from_buffer</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ai_platform_interface.o(i._platform_get_table_map_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>

<P><STRONG><a name="[1d9]"></a>_platform_get_table_map_from_buffer_array</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_get_table_map_from_buffer_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>

<P><STRONG><a name="[200]"></a>_platform_network_buffers_signature_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ai_platform_interface.o(i._platform_network_buffers_signature_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[1db]"></a>_platform_network_io_bind</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, ai_platform_interface.o(i._platform_network_io_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_data_byte_size
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[1df]"></a>_platform_network_state_setup</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_network_state_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_network_state_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[1e1]"></a>_platform_network_state_update_input</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_network_state_update_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_network_state_update_input
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[1e3]"></a>_platform_network_state_update_output</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ai_platform_interface.o(i._platform_network_state_update_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_network_state_update_output
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[260]"></a>transpose_items</STRONG> (Thumb, 360 bytes, Stack size 112 bytes, layers_generic_float.o(i.transpose_items))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = transpose_items
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_transpose
</UL>

<P><STRONG><a name="[1d6]"></a>_lite_nl_softmax_if32of32</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i._lite_nl_softmax_if32of32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lite_nl_softmax_if32of32 &rArr; _lite_nl_softmax_if32of32_kernel &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_nl_softmax_if32of32_kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
</UL>

<P><STRONG><a name="[1d7]"></a>_lite_nl_softmax_if32of32_kernel</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i._lite_nl_softmax_if32of32_kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lite_nl_softmax_if32of32_kernel &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_nl_softmax_if32of32
</UL>

<P><STRONG><a name="[25f]"></a>ai_shape_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, layers_nl_generic_float.o(i.ai_shape_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
</UL>

<P><STRONG><a name="[24c]"></a>ai_shape_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, layers_dw_sssa8_ch.o(i.ai_shape_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_sssa8_ch
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_3x3_sssa8_ch
</UL>

<P><STRONG><a name="[249]"></a>core_nl_get_params</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, layers_dw_sssa8_ch.o(i.core_nl_get_params))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_sssa8_ch
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_3x3_sssa8_ch
</UL>

<P><STRONG><a name="[24a]"></a>core_nl_get_params_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, layers_dw_sssa8_ch.o(i.core_nl_get_params_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_sssa8_ch
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dw_3x3_sssa8_ch
</UL>

<P><STRONG><a name="[8c]"></a>func_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, layers_dw_sssa8_ch.o(i.func_dummy))
<BR>[Address Reference Count : 2]<UL><LI> layers_dw_sssa8_ch.o(i.forward_dw_3x3_sssa8_ch)
<LI> layers_dw_sssa8_ch.o(i.forward_dw_sssa8_ch)
</UL>
<P><STRONG><a name="[25d]"></a>core_nl_get_params</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, layers_pw_sssa8_ch.o(i.core_nl_get_params))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pw_sssa8_ch
</UL>

<P><STRONG><a name="[25e]"></a>core_nl_get_params_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, layers_pw_sssa8_ch.o(i.core_nl_get_params_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pw_sssa8_ch
</UL>

<P><STRONG><a name="[8d]"></a>func_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, layers_pw_sssa8_ch.o(i.func_dummy))
<BR>[Address Reference Count : 1]<UL><LI> layers_pw_sssa8_ch.o(i.forward_pw_sssa8_ch)
</UL>
<P><STRONG><a name="[8b]"></a>func_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, layers_conv2d_rgb_sssa8_ch.o(i.func_dummy))
<BR>[Address Reference Count : 1]<UL><LI> layers_conv2d_rgb_sssa8_ch.o(i.forward_conv2d_rgb_sssa8_ch)
</UL>
<P><STRONG><a name="[26b]"></a>_float_to_integer</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, core_convert.o(i._float_to_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _float_to_integer
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[26a]"></a>_integer_to_float</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, core_convert.o(i._integer_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _integer_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[269]"></a>ai_shape_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, core_convert.o(i.ai_shape_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert_integer
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[1ea]"></a>_ai_forward_layer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, layers.o(i._ai_forward_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
</UL>

<P><STRONG><a name="[256]"></a>ai_padding_opt_phase2</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, forward_lite_dw_sssa8_ch.o(i.ai_padding_opt_phase2))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dw_sssa8_ch
</UL>

<P><STRONG><a name="[252]"></a>ai_padding_opt_phase2</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, forward_lite_conv2d_sssa8_ch.o(i.ai_padding_opt_phase2))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_rgb_sssa8_ch
</UL>

<P><STRONG><a name="[1c4]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
