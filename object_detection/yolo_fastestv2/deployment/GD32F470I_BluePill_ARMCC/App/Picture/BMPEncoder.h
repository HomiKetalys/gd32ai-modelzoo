/*********************************************************************************************************
* 模块名称：BMPEncoder.h
* 摘    要：BMP编码模块
* 当前版本：1.0.0
* 作    者：Leyutek(COPYRIGHT 2018 - 2021 Leyutek. All rights reserved.)
* 完成日期：2021年07月01日 
* 内    容：
* 注    意：
**********************************************************************************************************
* 取代版本：
* 作    者：
* 完成日期：
* 修改内容：
* 修改文件：
*********************************************************************************************************/
#ifndef _BMP_ENCODER_H_
#define _BMP_ENCODER_H_

/*********************************************************************************************************
*                                              包含头文件
*********************************************************************************************************/
#include "DataType.h"

/*********************************************************************************************************
*                                              宏定义
*********************************************************************************************************/
#define BMP_IMAGE_BUF_SIZE (1024) //图像数据缓冲区长度（按16位），缓冲区长度要大于屏幕宽度
#define BMP_NAME_LEN_MAX   (128)  //BMP文件名字（含路径）最大长度

//图象数据压缩的类型
#define BI_RGB       (0) //没有压缩.RGB 5,5,5.
#define BI_RLE8      (1) //每个象素8比特的RLE压缩编码，压缩格式由2字节组成(重复象素计数和颜色索引)；
#define BI_RLE4      (2) //每个象素4比特的RLE压缩编码，压缩格式由2字节组成
#define BI_BITFIELDS (3) //每个象素的比特由指定的掩码决定。

/*********************************************************************************************************
*                                              枚举结构体
*********************************************************************************************************/
//BMP头文件（14字节）
typedef __packed struct
{
  u16 bfType;      //文件标识，规定为0x4D42，字符显示就是'BM'
  u32 bfSize;      //文件大小,占四个字节
  u16 bfReserved1; //保留，必须设置为0
  u16 bfReserved2; //保留，必须设置为0
  u32 bfOffBits;   //从文件开始到位图数据(bitmap data)开始之间的的偏移量
}StructBMPFileHeader;

//BMP信息头（40字节）
typedef __packed struct
{
  u32 biSize;          //位图信息头的大小，一般为40
  u32 biWidth;         //位图的宽度,单位:像素
  u32 biHeight;        //位图的高度,单位:像素
  u16 biPlanes;        //颜色平面数，一般为1
  u16 biBitCount;      //比特数/像素数，其值为1、4、8、16、24、或32
  u32 biCompression;   //图象数据压缩的类型。其值可以是下述值之一：
                       //BI_RGB：没有压缩；
                       //BI_RLE8：每个象素8比特的RLE压缩编码，压缩格式由2字节组成(重复象素计数和颜色索引)
                       //BI_RLE4：每个象素4比特的RLE压缩编码，压缩格式由2字节组成
                       //BI_BITFIELDS：每个象素的比特由指定的掩码决定。
  u32 biSizeImage;     //位图数据的大小，以字节为单位，当用BI_RGB格式时，可以设置为0
  u32 biXPelsPerMeter; //水平分辨率,单位:像素/米
  u32 biYPelsPerMeter; //垂直分辨率,单位:像素/米
  u32 biClrUsed;       //调色板的颜色数,为0则颜色数为2的biBitCount次方
  u32 biClrImportant;  //重要的颜色数，0代表所有颜色都重要
}StructBMPInfoHeader;

//彩色表
typedef __packed struct
{
  u8 rgbBlue;     //指定蓝色强度
  u8 rgbGreen;    //指定绿色强度
  u8 rgbRed;      //指定红色强度
  u8 rgbReserved; //保留，设置为0
}s_structRGBQuad;

//位图头文件信息
typedef __packed struct
{
  StructBMPFileHeader bmFileHeader; //BMP头文件
  StructBMPInfoHeader bmInfoHeader; //BMP信息头
  u32                 rgbMask[3];   //RGB掩码
  u8                  reserved1;    //保留，使得头文件信息4字节对齐
  u8                  reserved2;    //保留，使得头文件信息4字节对齐
}StructBMPInfo;

/*********************************************************************************************************
*                                              API函数声明
*********************************************************************************************************/
//区域截图
u32 BMPEncodeWithRGB565(u32 x0, u32 y0, u32 width, u32 height, const char* path, const char* prefix);

//截图
void ScreeShot(void);

#endif
